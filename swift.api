 4/1: "hello" |> print
 5/1: "hello" |> print
 6/1: print("hello")
 7/1: "hello" |> print
 9/1: import pytest
 9/2: assert 1 == 2, 'Wrong value'
10/1: from itertools import groupby
10/2: from itertools import takewhile
10/3: l = [1, 2, 3, 6, 9]
10/4: takewhile(lambda x: x == 2, l)
10/5: list(takewhile(lambda x: x == 2, l))
10/6: list(takewhile(lambda x: x != 2, l))
10/7: zip(l, l[1:])
10/8: list(zip(l, l[1:]))
10/9: takewhile(lambda x: x[0] == x[1] +1, zip(l, l[1:]))
10/10: list(_)
10/11: list(takewhile(lambda x: x[0] == x[1] +1, zip(l, l[1:])))
10/12: list(takewhile(lambda x: x[0] == x[1] +1, zip(l, l[1:])))
10/13: l = zip(l, l[1:])
10/14: l
10/15: list(_)
10/16: list(_)
10/17: 0 = list(_)
10/18: o = list(_)
10/19: o
10/20:
for i in o:
    i[0] == i[1] +1
10/21:
for i in o:
    print(i[0] == i[1] +1)
10/22:
for i in o:
    print(i[0], i[1])
10/23:
for i in o:
    print(i[0], i[1], i[0] == i[1] -1)
10/24: list(takewhile(lambda x: x[0] == x[1] - 1, zip(l, l[1:])))
10/25: list(takewhile(lambda x: x[0] == x[1] + 1, zip(l, l[1:])))
10/26: list(takewhile(lambda x: x[0] == x[1] +1, l))
10/27: list(takewhile(lambda x: x[0] == x[1] - 1, l))
10/28: zip(l, l[1:])
11/1: l = [1, 2, 3, 5, 9, 10, 12]
11/2: zip(l, l[1:])
11/3: from functools import takewhile
11/4: from itertools import takewhile, groupby
11/5: takewhile(lambda x: x[0] == x[1] - 1, zip(, l[1:]))
11/6: takewhile(lambda x: x[0] == x[1] - 1, zip(l, l[1:]))
11/7: list(_)
11/8: import create_intervals
11/9: create_intervals.make_tuple([1,2,3,4])
11/10: from itertools import tee
11/11: l
11/12: tee(l, 2)
11/13: p = lambda x: x != 2
11/14: from itertools import dropwhile
11/15: dropwhile(p, l)
11/16: list(dropwhile(p, l))
11/17: from create_intervals import takewhile2
11/18: takewhile2(lambda x: x <= 2, [1, 2, 3, 5])
11/19: import create_intervals
11/20: takewhile2(lambda x: x <= 2, [1, 2, 3, 5])
11/21: %reload create_intervals
11/22: %load create_intervals
11/23:
# %load create_intervals
#!/usr/bin/env python

from itertools import tee, takewhile, dropwhile

fst = lambda x: x[0]
snd = lambda x: x[1]
last = lambda x: x[-1]
make_tuple = lambda the_list: zip(the_list, the_list[1:])
same_plus_1 = lambda nxt: fst(nxt) == snd(nxt) - 1

def takewhile2(predicate, the_iter):
    """ :: (a -> Bool) -> [a] -> [a]', [a]''
    where predicate([a]' ) == True
          [a]'' is the remaining
    """
    list_p, remaining = tee(the_iter, 2)
    return list(takewhile(predicate, list_p)), list(dropwhile(predicate, remaining))

def list_and_order_it(the_set):
    """ :: {Int} -> [Int],
    where value are ordered"""
    return sorted(list(the_set))

def group_until_1(the_list):
    """ :: [Int] -> (Int),
    where value in result does not contain gap"""
    chunck = list(takewhile(same_plus_1, make_tuple(the_list)))
    return fst(fst(chunck)), snd(last(chunck))

def create_intervals(the_set):
    result = list_and_order_it(the_set)
    group_until_1(result)
    return the_set

def test_create_intervals():
    assert list_and_order_it({0, 1, 2, 3, 4, 5 }) == list(range(6)), 'The list is not ordered'
    assert same_plus_1((1, 2)) == True
    assert same_plus_1((1, 3)) == False
    assert list(make_tuple([1, 2, 3, 4])) == [(1,2), (2,3), (3,4)]
    assert group_until_1([1, 2, 3, 5, 9, 10, 12]) == (1,3)
    assert takewhile2(lambda x: x <= 2, [1, 2, 3, 5]) == [1, 2], [3, 5]
    # assert create_intervals({1, 2, 3, 4, 5, 7, 8, 12}) == {}, 'Wrong answer'


if __name__ == '__main__':
    test_create_intervals()
11/24: takewhile2(lambda x: x <= 2, [1, 2, 3, 5])
11/25: %autoreload 2
11/26: %autoreload 2
11/27: %autoreload
11/28: %load_ext autoreload
11/29: %autoreload
11/30: import create_intervals
11/31: create_intervals.group_until_1([1, 2, 3, 5, 9, 10, 12])
11/32: %autoreload
11/33: create_intervals.group_until_1([1, 2, 3, 5, 9, 10, 12])
11/34: list(create_intervals.group_until_1([1, 2, 3, 5, 9, 10, 12]))
11/35: list(create_intervals.group_until_1(create_intervals.make_tuple([1, 2, 3, 5, 9, 10, 12])))
11/36: l = create_intervals.make_tuple([1, 2, 3, 5, 9, 10, 12])
11/37: l
11/38: %autoreload
11/39: l = create_intervals.make_tuple([1, 2, 3, 5, 9, 10, 12])
11/40: l
11/41: %autoreload
11/42: create_intervals.untoggle_tuple(l)
11/43: list(create_intervals.untoggle_tuple(l))
11/44: %autoreload
11/45: create_intervals.untoggle_tuple(l)
11/46: %autoreload
11/47: create_intervals.untoggle_tuple(l)
11/48: %autoreload
11/49: create_intervals.group_until_1(l)
11/50: list(create_intervals.group_until_1(l))
11/51:
for i in create_intervals.group_until_1(l):
    print(i)
11/52: %autoreload
11/53: list(create_intervals.group_until_1(l))
11/54: %autoreload
11/55: list(create_intervals.group_until_1(l))
11/56: %autoreload
11/57: list(create_intervals.group_until_1(l))
11/58: %autoreload
11/59: list(create_intervals.group_until_1(l))
11/60: %autoreload
11/61: list(create_intervals.group_until_1(l))
12/1: import create_intervals
12/2: list(create_intervals.group_until_1(l))
12/3: l = create_intervals.make_tuple([1, 2, 3, 5, 9, 10, 12])
12/4: l = [1, 2, 3, 5, 9, 10, 12]
12/5: list(create_intervals.group_until_1(l))
12/6: %load_ext autoreload
12/7: %autoreload
12/8: list(create_intervals.group_end(l))
13/1: import create_intervals
13/2: list(create_intervals.group_end((1,2), (3, 4)))
13/3: list(create_intervals.group_end([(1,2), (3, 4))])
13/4: list(create_intervals.group_end([(1,2), (3, 4)]))
13/5: %autoreload
13/6: %load_ext autoreload
13/7: %autoreload
13/8: list(create_intervals.group_end([(1,2), (3, 4)]))
14/1: %load_ext autoreload
14/2: import create_intervals
14/3: list(create_intervals.group_end([(1,2), (3, 4)]))
14/4: create_intervals.group_end([(1,2), (3, 4)])
14/5: autoreload
14/6: autoreload
14/7: create_intervals.f([1,2,3,5,6,7,10,12])
14/8:
for i in create_intervals.f([1,2,3,5,6,7,10,12]):
    i
14/9: autoreload
14/10:
for i in create_intervals.f([1,2,3,5,6,7,10,12]):
    i
14/11: l
14/12: l = [9]
14/13: l[-1]
14/14: l[:1]
14/15: l[1:]
14/16: l = [9, 8]
14/17: l[1:]
14/18: l[:1]
14/19: l = [9, 8, 7]
14/20: l[:1]
14/21: l[1:]
14/22:  ll = [8]
14/23: ll[1:]
14/24: l
14/25: l = [1]
14/26: l[-1]
14/27: l[0]
14/28: %autoreload
14/29:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    i
14/30:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/31:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/32: %autoreload
14/33:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/34: %autoreload
14/35:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/36: %autoreload
14/37:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/38: %autoreload
14/39:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/40: %autoreload
14/41:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/42: %autoreload
14/43:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/44: %autoreload
14/45:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/46: %autoreload
14/47:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/48: %autoreload
14/49:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
14/50: %autoreload
14/51:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
15/1: import create_intervals
15/2:
for i in create_intervals.process([1,2,3,5,6,7,10,12]):
    print(i)
17/1: from functools import reduce
17/2: l = list(range(10))
17/3: reduce(lambda x, y: x + y, l)
17/4: from operator import add
17/5: reduce(add, l)
17/6: reduce(add, l, 100)
17/7: from itertools import count
17/8: count(8)
18/1: slice(2, 4)
18/2: slice(2, 4, 5)
18/3: l = [range(10)]
18/4: l
18/5: l = range(10)
18/6: l
18/7: from itertools import accumulate
18/8: accumulate(l)
18/9: list(accumulate(l))
18/10: l
18/11: isinstance(3, int)
18/12:
def f(x, y):
    return (x, y)
18/13: list(accumulate(l, f))
18/14: from itertools import repeat
18/15:
for _ in range(2):
    next(repeat('samir'))
18/16:
for _ in range(2):
    print(next(repeat('samir')))
18/17: from itertools import cycle
18/18:
def iterate(f, x):
    return accumulate(repeat(x), lambda fx, _: f(fx))
18/19: list(iterate(range(10), lambda x: x*2))
18/20: list(iterate(10, lambda x: x*2))
18/21: list(iterate(lambda x: x*2, 10))
19/1: from itertools import accumulate
19/2:

from itertools import count, repeat, cycle, islice, tee, repeat, accumulate, chain
19/3:
def take(n, it):
  return [x for x in islice(it, n)]
19/4: take(3, range(10))
19/5:
def iterate(f, x):
    return accumulate(repeat(x), lambda fx, _: f(fx))
19/6: take(3, iterate(lambda x: x*x, 1))
19/7: l = [1, 2, 3, 5, 7, 12]
19/8: filter(lambda x, y: x == y - 1, l)
19/9: list(filter(lambda x, y: x == y - 1, l))
19/10: from functools import reduce
19/11: list(reduce(lambda x, y: (x[0], y) if x[0] == y - 1 else (y, 0), l, (0,0)))
19/12: list(reduce(lambda x, y: (x[0], y) if x[0] == y - 1 else (y, y), l, (0,0)))
19/13: list(reduce(lambda x, y: (x[0], y) if x[0] == y - 1 else (x[0], y), l, (0,0)))
19/14: list(reduce(lambda x, y: (x[0], y) if x[0] == y - 1 else (x[0], y), l, (l[0],l[1])))
19/15: iterate
19/16:
def inter(x, y):
    if x[0] == y[0]-1:
        return (x[0], y[0])
    else:
        return y
19/17: list(reduce(inter, zip(l,l), (0,0)))
19/18: import random
19/19: random.sample(range(3), 4)
19/20: random.sample(range(100), 4)
19/21: import numpy as np
19/22: points = np.random.random((100, 2))
19/23: points
19/24: random.sample(range(100), 4)
19/25: random.sample(range(100), 1000)
19/26: random.sample(range(10000), 10)
19/27: l
19/28:
def inter(x, y):
    if x != y - 1: 
        raise StopIteration
    else:
        y
19/29: list(accumulate(l, inter))
19/30:
def inter(x, y):
    if x != y - 1: 
        yield x
        raise StopIteration
    else:
        y
19/31: list(accumulate(l, inter))
19/32: from itertools import takewhile
19/33: l
19/34: res = [x for x,y in takewhile(lambda x: x[0] != x[1] -1, zip(l, l[1:]))]
19/35: res
19/36: res = [x for x,y in takewhile(lambda x: x[0] == x[1] -1, zip(l, l[1:]))]
19/37: res
19/38: zip(l,l[1:])
19/39: list(_)
19/40: accumulate(lambda x,y: x - y, l)
19/41: accumulate(l, lambda x,y: x - y)
19/42: list(_)
19/43:
def inter(x, y):
    if x == y - 1:
        return x
    else:
        return y
19/44: l
20/1: f = lambda x, y: x == y - 1
20/2: f(2,3)
20/3: f(3,3)
20/4: f = lambda x, y: x == y - 1 || x == y
20/5: f = lambda x, y: x == y - 1 or x == y
20/6: f(3,3)
20/7: from itertools import accumulate
20/8: ls_data = [1, 2, 3, 4, 5, 7, 8, 12]
20/9: ls_data
20/10: from operator import add
20/11: accumulate(ls_data, add)
20/12: list(_)
20/13:
def f2(previous, (init, last)):
    if f(previous, last):
        return True, (last, (init, last))
    else:
        return False, (last, (init, previous))
20/14:
def f2(previous, init_last):
    init, last = init_last
    if f(previous, last):
        return True, (last, (init, last))
    else:
        return False, (last, (init, previous))
20/15: f2(1, 3)
20/16: ls_data
20/17: ls_data
20/18: f2(2, (1, 3))
20/19: is_inter = lambda x: return x[0]
20/20: is_inter = lambda x: x[0]
20/21: is_inter(f2(2, (1, 3)))
20/22: f2(2, (1, 3))
20/23:
def acc(inter, next_):
    res, curr = inter
    pre, cpl = curr
    init, bal = cpl
    if res:
        return pre, (init, next_)
    else:
        return pre, (init, pre)
20/24: acc(f2(2, (1, 3)))
20/25: acc(f2(2, (1, 3)), 4)
20/26: acc(f2(2, (1, 3)), 5)
20/27: acc(f2(2, (1, 3)), 6)
20/28: f2(2, (1, 3))
20/29: iter(ls_data)
20/30: ls_data
21/1: import subprocess
21/2: subprocess.call(['ls', '-l'])
22/1: import subprocess
22/2: subprocess.check_call(['ps', '-ef'])
22/3: subprocess.check_call(['echo'])
22/4: subprocess.check_call(['./read.sh'])
22/5: p = subprocess.Popen(['./read.sh'])
22/6: clear
22/7: p = subprocess.Popen(['ps', '-ef'], stdout="/dev/pts/3")
22/8: p = subprocess.Popen(['ps', '-ef'], stdout=2)
22/9: p = subprocess.Popen(['./read.sh']), stdin=subprocess.PIPE)
22/10: p = subprocess.Popen(['./read.sh'], stdin=subprocess.PIPE)
22/11: p.communicate('Samir')
22/12: p.communicate(u'Samir')
22/13: p.communicate(b'Samir')
22/14: output = open('samir_out', 'w')
22/15: p = subprocess.Popen(['./read.sh'], stdin=subprocess.PIPE, stdout=output)
22/16: p.communicate(b'Oana')
22/17: output.close()
22/18: p = subprocess.Popen(['./read.sh'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
22/19: p.communicate(b'Oana')
22/20: raw_input('Name:')
22/21: name = input('Name:')
22/22: byte('samir')
22/23: Byte('samir')
22/24: Bytes('samir')
22/25: str.encode('samir')
23/1: ls_data = [1, 2, 3, 4, 5, 7, 8, 12]
24/1: ls_data = [1, 2, 3, 4, 5, 7, 8, 12]
24/2: from itertools import count, repeat, cycle, islice, tee, repeat, accumulate, chain
24/3: from operator import add
24/4: accumulate(ls_data, add)
24/5: list(_)
25/1: from itertools import count, repeat, cycle, islice, tee, repeat, accumulate, chain
25/2: from operator import add
25/3: ls_data = [1, 2, 3, 4, 5, 7, 8, 12]
25/4: interm1 = (2, 1, 2)
25/5: interm2 = (3, 1, 3)
25/6: interm1 = (1, 1)
25/7: is_inter = lambda x, y: x == y -1 or x == y
25/8:
def interm(x, y, seed):
    if is_inter(x, y):
        return seed[0], y
    else:
        return seed
25/9: interm(1, 2, (1,1))
25/10: interm(1, 3, (1,2))
25/11: interm(2, 3, (1,2))
25/12: interm(3, 4, (1,2))
25/13: interm(4, 5, (1,2))
25/14: interm(5, 7, (1,2))
25/15: interm(5, 7, (1,5))
25/16: from functools import reduce
25/17: init = (1, 1)
25/18:
def interm(interm_, next_):
    if is_inter(interm_[1], next_):
        return interm_[1], next_
    else:
        raise StopIteration
25/19: accumulate(ls_data, interm)
25/20: list(_)
25/21: reduce(interm, ls_data, (1,1))
25/22: list(_)
25/23:
def interm(interm_, next_):
    if is_inter(interm_[1], next_):
        return interm_[1], next_
    else:
        raise next_, next_
25/24:
def interm(interm_, next_):
    if is_inter(interm_[1], next_):
        return interm_[1], next_
    else:
        return next_, next_
25/25: reduce(interm, ls_data, (1,1))
25/26: def acc_red(interm, ls_data, (1,1)):
25/27: def acc_red(interm, ls_data, (1,1)):
25/28:
def acc_red(f, ls_data, init):
    if f(init[1], next(ls_data))
25/29:
def acc_red(f, ls_data, init):
    l = []
    l.append(f(init[1], next(ls_data)))
25/30: acc_red(interm, ls_data, (1,1))
25/31: ls_data
25/32: acc_red(interm, iterator(ls_data), (1,1))
25/33: acc_red(interm, iter(ls_data), (1,1))
25/34:
def interm(interm_, next_):
    if is_inter(interm_[1], next_):
        return interm_[1], next_
    else:
        return next_, next_
25/35: interm(5, 7, (1,5))
25/36:
def interm(interm_, next_):
    if is_inter(interm_[1], next_):
        return interm_[1], next_
    else:
        return next_, next_
25/37: interm((1,5), 6)
25/38:
def interm(tup, next_):
    if is_inter(tup[1], next_):
        return tup[0], next_
    else:
        return next_, next_
25/39: interm((1,5), 6)
26/1: import create_intervals2
26/2: import create_intervals2
26/3: interm((1,2), 3)
26/4: import create_intervals2 as c
26/5: c.interm((1,2), 3)
26/6: import create_intervals2 as c
26/7: c.interm((1,2), 3)
26/8: c.interm((1,2), 3)
26/9: import create_intervals2 as c
26/10: c.interm((1,2), 3)
27/1: import create_intervals2 as c
27/2: import create_intervals2 as c
27/3: c.interm((1,2), 3)
27/4: import create_intervals2 as c
27/5: c.interm((1,2), 3)
28/1: import create_intervals2 as c
28/2: c.interm((1,2), 3)
28/3: import create_intervals2 as c
28/4: c.interm((1,2), 3)
28/5: eit
29/1: import create_intervals2 as c
29/2: c.interm((1,2), 3)
29/3:
def interm(x_y, n):
    return  fst(x_y), n if is_inter(snd(x_y), n) else n, n
29/4: interm((1,2), 3)
29/5: fst = lambda x: x[0]
29/6: snd = lambda x: x[1]¬
29/7: snd = lambda x: x[1]
29/8: interm((1,2), 3)
29/9: is_inter = lambda x, y: x == y - 1 or x == y
29/10: interm((1,2), 3)
29/11: fst((1,2))
29/12:
def interm(x_y, n):
    return  fst((x_y)), n if is_inter(snd(x_y), n) else n, n
29/13: interm((1,2), 3)
29/14:
def interm(x_y, n):
    if is_inter(snd(x_y) n):
29/15:
def interm(x_y, n):
    if is_inter(snd(x_y), n):
        return fst(x_y), n
    else:
        return n, n
29/16: interm((1,2), 3)
29/17: l = []
29/18: ab = (2,3)
29/19: ab + l
30/1: ls_data = [1, 2, 3, 4, 5, 7, 8, 12]
30/2: next(ls_data)
30/3: xs = iter(ls_data)
30/4: next(xs)
30/5: list(xs)
30/6: next(xs)
31/1: sqrt(w)
31/2: import math
31/3: math.sqrt(3)
31/4: math.sqrt(-2)
31/5: math.sqrt(-4)
31/6: math.sqrt(1)
31/7: math.sqrt(3)
32/1: import define_class
34/1: import selenium
34/2: from selenium import webdriver
34/3: driver = webdriver.Chrome()
34/4: driver = webdriver.Firefox()
34/5: driver.switch_to.active_element()
34/6: help(driver.switch_to)
34/7: driver.switch_to.active_element
34/8: a = driver.switch_to.active_element
34/9: help(driver.switch_to)
35/1:
    listItem = [
                ['101','Dashboard'],
                ['102','Potential Customer'],
                ['102-01','Potential Customer Activity'],
                ['102-02','Potential Customer Report'],
                ['102-99','Potentail Customer Detail'],
                ['102-99-01','Potential Customer Detail Listing'],
                ['102-99-02','Potential Customer Follow Up'],
                ['102-99-02-01','Follow Up PAR']
            ]
35/2: listItem
35/3:
for item in listItem:
    item.split('-')
35/4:
for item in listItem:
    item[0].split('-')
35/5: id
35/6: itid = lambda x: x[0]
35/7: itval = lambda x: x[1]
35/8:
for item in listItem:
    print(itid(item))
    print(itval(item))
35/9:
def wrapit(it_id):
    return '<li item-id="%s">' % it_id
35/10:
def wrapval(id_val):
    return '%s</li>' % id_val
35/11:
for item in listItem:
    print(wrapit(itid(item)))
    print(wrapval(itval(item)))
35/12: 'a-b'.split('-')
35/13: 'ab'.split('-')
35/14: last = lambda x:[-1]
35/15:
def put_ol(it_id):
    return last(it_id) == '01'
35/16: put_ol("102-01")
35/17:
def put_ol(it_id):
    return last(it_id.split('-')) == '01'
35/18: put_ol("102-01")
35/19:
def put_ol(it_id):
    return last(it_id.split('-'))
35/20:
def put_ol(it_id):
    return last(it_id.split('-'))
35/21: put_ol("102-01")
35/22: last = lambda x:x[-1]
35/23: put_ol("102-01")
35/24:
def put_ol(it_id):
    return last(it_id.split('-')) == '01'
35/25: put_ol("102-01")
35/26:
for item in listItem:
    if put_ol(itid(item)):
        print('ol')
    print(wrapit(itid(item)))
    print(wrapval(itval(item)))
35/27:
for item in listItem:
    if put_ol(itid(item)):
        print('<ol>')
    print(wrapit(itid(item)))
    print(wrapval(itval(item)))
36/1: import textwrap
37/1: import textwrap
37/2: textwrap.wrap('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh', 40)
37/3: print(textwrap.wrap('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh', 40))
37/4: 45/8
38/1: import collections
39/1: import collections
39/2: P = collections.namedtuple('P', 'name age')
39/3: p1 = P(name='Samir', age=42)
39/4: p1.name
39/5: p2 = P()
39/6: p2 = P('samir', 42)
39/7: p2.name
40/1: import random
40/2: random.random()
40/3: random.random()
40/4: random.random()
41/1: import date
41/2: import datetime
41/3: datetime.datetime.now()
41/4: datetime.datetime()
41/5: datetime.datetime.now()
43/1: 14000.41-13627.28
43/2: 373/20
44/1: 20 * 18.5
44/2: 20 * 0.125
44/3: 20* 1.25 * 0.125
44/4: 20 * 18.5 + 20* 1.25 * 0.125
45/1: 20 * 1.25
47/1: help(flask)
48/1: 5600 - 375 - 508.99 - 42
48/2: _ - 3510
48/3: _ - 175
48/4: 5600 - 508.99 - 375 - 100 - 42
48/5: _ - 3510
48/6: _ - 175
48/7: eit
50/1: import os
50/2: os.curdir()
50/3: import sys
50/4: os.curdir('.')
50/5: clear
50/6: os.curdir
51/1: import os.path
52/1: "bo_ok".split("_")
53/1: info("assert")
53/2: help("assert")
53/3: help("pytest")
53/4: 3^2
53/5: 3**@
53/6: 3**2
53/7: help(math)
53/8: help("math")
53/9: from math import factorial
53/10: factorial(1)
53/11: factorial(1)
53/12: factorial(10)
53/13: factorial(3)
53/14: factorial(4)
53/15: factorial(5)
53/16: factorial(42)
53/17: round(3.45, 2)
53/18: round(3.45, 2)
53/19: round(3.458, 2)
53/20: factorial(5)
53/21:
if 1 <= 1:
    print("ok")
53/22:
if 0.1 <= 1:
    print("ok")
53/23:
if 0.1 = 1:
    print("ok")
53/24:
if 0.1 == 1:
    print("ok")
53/25:
def btw(a, b, c):
    return a <= c and c <= b
53/26: from functools import partial
53/27: _01 = partial.func(btw, 0, 1)
53/28: b01 = partial.func(btw, 0, 1)
53/29: b01 = partial.func(btw(), 0, 1)
53/30: help("partial")
53/31: help("functools")
53/32: b01 = partial.func(btw(), 0, 1, c)
53/33: b01 = partial.func(btw, 0, 1, c)
53/34: help("operator")
53/35: import operator
53/36: from operator import le, ge
53/37: le(3, 9)
54/1: 1250 * 1.22
55/1: 6000 * 1.2
55/2: 6000 * 1.15
55/3: 7200/12.0
55/4: 6000 * 1.02
55/5: 6120 / 12
55/6: 6120 * 1.02
55/7: 6242 / 12
55/8: 6242 * 1.02
55/9: import cli
56/1: from operator import le, ge
56/2: ge(0.02, 0.0)
56/3: le(0.02, 1.0)
56/4: ge(0.02, 0.0) and le(0.02, 1.0)
56/5: not ge(0.02, 0.0) and le(0.02, 1.0)
58/1: import tvalue
58/2: tvalue._btw_01(1)
58/3: tvalue._btw_01(1.1)
58/4: tvalue._btw_01(0.2)
58/5: from operator import le, ge
58/6: ge(10, 0)
58/7: ge(0, 10)
58/8: le(0, 10)
58/9: ge(0, -1)
59/1: import tvalue
59/2: tvalue._btw_01(0.2)
59/3: tvalue._btw_01(10)
59/4: tvalue._btw_01(0)
59/5: tvalue._btw_01(0.9)
59/6: tvalue._btw_01(-1)
59/7: tvalue._effective_an_r(0.10, 2)
60/1: help(sys)
60/2: import sys
60/3: help(sys.exit)
60/4: xit
60/5: ext
61/1: help(click)
61/2: info(click)
62/1: "akj;kjl;lkj".spit(';')
62/2: "akj;kjl;lkj".split(';')
62/3: tuple("akj;kjl;lkj".split(';'))
62/4: tuple("a-k-j;k-j-l;l-k-j".split(';').split("-"))
62/5: "a-k-j;k-j-l;l-k-j".split(';')
62/6: [ p.split("-") for p in "a-k-j;k-j-l;l-k-j".slit(';') ]
62/7: [ p.split("-") for p in "a-k-j;k-j-l;l-k-j".split(';') ]
62/8: tuple([ tuple(p.split("-")) for p in "a-k-j;k-j-l;l-k-j".split(';') ])
63/1: tuple([ tuple(p.split("-")) for p in "a-k-j;k-j-l;l-k-j".split(';') ])
63/2: tuple([ tuple(p.split("-")) for p in "200-1-3;300-3-0;500-3-3".split(';') ])
63/3: map(int, tuple([ tuple(p.split("-")) for p in "200-1-3;300-3-0;500-3-3".split(';')]))
63/4: tuple(map(int, tuple([ tuple(p.split("-")) for p in "200-1-3;300-3-0;500-3-3".split(';')])))
63/5: tuple([tuple(p.split("-")) for p in "200-1-3;300-3-0;500-3-3".split(';')])
63/6: set -o vi
63/7: tuple([tuple(map(int, p.split("-"))) for p in "200-1-3;300-3-0;500-3-3".split(';')])
64/1: tuple([tuple(map(int, p.split("-"))) for p in "200-1-3;300-3-0;500-3-3".split(';')])
64/2: res = tuple([tuple(map(int, p.split("-"))) for p in "200-1-3;300-3-0;500-3-3".split(';')])
64/3: f = lambda xyz: xyz['0'] + xyz['1'] + xyz['2']
64/4: f((3,4,5))
64/5: f = lambda xyz: xyz[0] + xyz[1] + xyz[2]
64/6: f((3,4,5))
64/7: from itertools import accumulate
64/8: from operator import add
64/9: list(map(f, res))
64/10: accumulate(add, map(f, res))
64/11: accumulate(add, list(map(f, res)))
64/12: accumulate(add, [2,3])
64/13: help(accumulate)
64/14: accumulate([2,3], add)
64/15: int(accumulate([2,3], add))
64/16: list(accumulate([2,3], add))
64/17: from itertools import compress
64/18: help(compress)
64/19: reduce
64/20: from functools import reduce
64/21: reduce([2,3], add)
64/22: reduce(add, [2,3])
64/23: reduce(add, map(f, res))
65/1:
def f(a, b, c):
    return a+b+c
65/2: res = tuple([tuple(map(int, p.split("-"))) for p in "200-1-3;300-3-0;500-3-3".split(';')])
65/3: res
65/4: from functools import reduce
65/5: from operators import add
65/6: from operator import add
65/7: reduce(add, map(f, res))
65/8: reduce(add, map(f, *res))
66/1: res = tuple([tuple(map(int, p.split("-"))) for p in "200-1-3;300-3-0;500-3-3".split(';')])
66/2:
def f(a, b, c):
    return a+b+c
66/3: reduce(add, map(f, *res))
66/4: from operator import add
66/5: from functools import reduce
66/6: reduce(add, map(f, *res))
66/7: res
67/1:
def f(x, y, z, v):
    return x + y + z + v
67/2: f(1,2,3,4)
67/3: from functools import partial
67/4: g = partial(x=100)
67/5: g = partial(f, x=100)
67/6: g(2,3,4)
67/7: g = partial(v=100)
67/8: g = partial(f, v=100)
67/9: g(2,3,4)
68/1: from tvalue import Valuation
68/2: from tvalue import Valuation
68/3: v = Valuation()
68/4: v.rate = 9
68/5: v.rate = 9
68/6: from tvalue import Valuation
68/7: v.rate = 9
68/8: v = Valuation()
68/9: v.rate = 9
69/1: clear
69/2: from tvalue import Valuation
69/3: v = Valuation()
69/4: v.rate = 9
69/5: v = Valuation()
69/6: v.rate = 9
70/1: 575 * 12
71/1: rate = 0.08/12
71/2: rate
71/3: denom = 1 - (1 / pow(1 + rate, 30))
71/4: denom
71/5: pv = 200000
71/6: pv * rate / denom
71/7: pv * (rate / denom)
71/8: rate / denom
71/9: right = rate / denom
71/10: pv * right
71/11: denom = 1 / pow(1 + rate, 30)
71/12: denom
71/13: y = rate / (1 - denom)
71/14: y
71/15: pv * y
71/16: pv
71/17: p1 = pv * rate
71/18: p1
71/19: p1/(1-(1+rate)^-30)
71/20: p1/(1-pow((1+rate),-30))
71/21: rate
72/1: 2.5/8
71/22: pv
71/23: ar = 0.08
71/24: n_year = 30
71/25: inst = 12
71/26: rate = ar/inst
71/27: rate
71/28: d2 = 1/pow(1+rate, 30)
71/29: d2
71/30: den = 1 - d2
71/31: den
71/32: mul = rate / den
71/33: mul
71/34: pv * mul
71/35: 30 * 12
73/1: from click.testing import CliRunner
73/2: import cli
73/3: runner = CliRunner()
73/4: runner.invoke(cli.annuities, [200, 0.08, 30, 12])
73/5: res = runner.invoke(cli.annuities, [200, 0.08, 30, 12])
73/6: res
73/7: res.output
73/8: res = runner.invoke(cli.annuities, ['200000', '0.08', '30', '12'])
73/9: res
73/10: res.output
74/1: 575 * 12
74/2: 600 * 12
74/3: 7200/6900
74/4: 6900/7200
74/5: 575/600
74/6: 575*1.042
74/7: 1 - (575/600)
74/8: 500 * 24
75/1: print(3) if 1 < 3
75/2: print(3) if 1 < 3 else print(1)
76/1: 28*3
76/2: 25 * 3
77/1: 35238 + 37504
77/2: 28000*3
78/1: import tvalue
78/2: help(tvalue)
79/1: import tvalue
79/2: help(tvalue)
80/1: import tvalue
80/2: tvalue.pv_simple_cashflow(100, .1, 10)
81/1: import sys
81/2: import os
81/3: import glob
81/4: files = glob.glob('Invoice-E83-.*.jpg')
81/5: files
81/6: ls
81/7: files = glob.glob('Invoice-E83-*.jpg')
81/8: ls
81/9: files
81/10: files = glob.glob('Invoice-E83-.*.pdf')
81/11: files
81/12: files = glob.glob('Invoice-E83-*.pdf')
81/13: files
81/14:
for file in files:
    date = files.split('_')[2]
    print(date)
81/15:
for file in files:
    date = file.split('_')[2]
    print(date)
81/16:
for file in files:
    date = file.split('_')[1]
    print(date)
81/17:
for file in files:
    date = file.split('_')
    print(date)
81/18: "invoice-abs-29292".split('-')
81/19:
for file in files:
    file.split('_')
81/20:
for file in files:
    date = file.split('-')[2]
    print(date)
81/21:
for file in files:
    date = file.split('-')[2].split(".")[0]
    print(date)
81/22:
for file in files:
    date = file.split('-')[2].split(".")[0].split('2017')[0]
    print(date)
81/23:
for file in files:
    date = file.split('-')[2].split(".")[0].split('2017')[0]
    os.rename(file, '2017{}01 - E83 - Gamut.pdf'.format(date))
81/24: files = glob.glob('Invoice-Gamut-.*.jpg')
81/25:
for file in files:
    date = file.split('-')[2].split(".")[0].split('2017')[0]
    os.rename(file, '2017{}01 - Gamut - Euroclear.pdf'.format(date))
81/26: files = glob.glob('TimeSheet_.*.jpg')
81/27: files = glob.glob('TimeSheet_.*.jpg')
81/28: files
81/29: files = glob.glob('TimeSheet_*.jpg')
81/30: files
81/31: files = glob.glob('TimeSheet_*.pdf')
81/32: files
81/33:
for file in files:
    date = file.split('-')[1].split('.')[0].split('2017')[0]
    print(date)
81/34:
for file in files:
    date = file.split('-')[1].split('.')[0].split('2017')[0]
    os.rename(file, "2017{}01 - TimeSheet - Samir Sadek.pdf".format(date))
81/35: files = glob.glob('*Gamut*.pdf')
81/36: files = glob.glob('Invoice-Gamut*.pdf')
81/37: files
81/38:
for file in files:
    date = file.split('-')[2].split('.')[0].split('2017')[0]
    print(date)
81/39:
for file in files:
    date = file.split('-')[2].split('.')[0].split('2017')[0]
    os.rename(file, "2017{}01 - Gamut - Euroclear.pdf".format(date))
82/1: clear
82/2: ll
82/3: ls
82/4: rm -rf Python-3.6.0
82/5: clear
82/6: ll
82/7: vi t.py
82/8: vim t
82/9: clear
83/1: import yaml
84/1: from ruamel.yaml import YAML
84/2: yaml = YAML(typ='safe')
84/3: settings = open('details.yml')
84/4: yaml.load(settings)
84/5: cont = settings.read()
84/6: cont
85/1: from ruamel.yaml import YAML
85/2: l
85/3: ll
85/4: f = open('details.yml')
85/5: f
85/6: content = f.read()
85/7: content
85/8: yaml=YAML(typ="safe")
85/9: yaml.load(content)
85/10: content
85/11: content1 = f.read()
85/12: content1
86/1: from ruamel.yaml import YAML
87/1: import yaml
87/2: f = open('details.yml')
87/3: content = f.read()
87/4: content
87/5: yaml.load(content)
88/1: import yaml
88/2: details = {'invoice-nr': 8}
88/3: stream = file('details.yml', 'w')
88/4: file = open('details.yml', 'w')
88/5: yaml.dump(details, file)
88/6: file.close()
88/7: print(yaml.dump(details))
88/8: details = {'invoice-nr': 8}, 'traits': ['one', 'two']}
88/9: details = {'invoice-nr': 8, 'traits': ['one', 'two']}
88/10: print(yaml.dump(details))
88/11: details = {'invoice-nr': 8, }
88/12: print(yaml.dump(details))
88/13: details = {'invoice-nr': 8}
89/1: import yaml
89/2: with open("details.yml') as f:
89/3:
with open("details.yml") as f:
    doc = yaml.load(f)
90/1: import yaml
90/2:
with open("details.yml") as f:
    doc = yaml.load(f)
90/3:
with open("details.yml") as f:
    doc = yaml.load(f)
90/4:
with open("details.yml") as f:
    doc = yaml.load(f)
90/5: doc
90/6:
with open("details2.yml", 'w') as ft:
    yaml.dump(doc, ft)
91/1: import yaml
91/2:
with open("details.yml") as f:
    doc = yaml.load(f)
91/3: doc
91/4:
with open("details2.yml", 'w') as ft:
    yaml.dump(doc, ft)
91/5:
with open("test.yml") as f:
    doc = yaml.load(f)
91/6:
with open("test.yml") as f:
    doc = yaml.load(f)
91/7: doc
91/8:
with open("test2.yml", 'w') as ft:
    yaml.dump(doc, ft)
92/1: from ruamel.yaml import yaml
92/2: from ruamel.yaml import YAML
92/3: yaml = YAML(typ='safe')
92/4:
with open("test.yml") as f:
    doc = yaml.load(f)
92/5: doc
92/6:
with open("test2.yml", 'w') as ft:
    yaml.dump(doc, ft)
92/7: yaml = YAML(typ='safe', pure=True)
92/8:
with open("test.yml") as f:
    doc = yaml.load(f)
92/9:
with open("test3.yml", 'w') as ft:
    yaml.dump(doc, ft)
92/10:
with open("safe_dump.yml", 'w') as ft:
    yaml.safe_dump(doc, fp, default_flow_style=False)
92/11: from ruamel import yaml
92/12:
with open("safe_dump.yml", 'w') as ft:
    yaml.safe_dump(doc, fp, default_flow_style=False)
92/13:
with open("safe_dump.yml", 'w') as ft:
    yaml.safe_dump(doc, ft, default_flow_style=False)
92/14:
with open("details.yml") as f:
    doc = yaml.load(f)
93/1: from ruamel import yaml
93/2:
with open("details.yml") as f:
    doc = yaml.save_load(f)
93/3:
with open("details.yml") as f:
    doc = ruamel.yaml.save_load(f)
93/4: from ruamel import yaml
93/5:
with open("details.yml") as f:
    doc = yaml.save_load(f)
93/6:
with open("details.yml") as f:
    doc = yaml.load(f)
94/1: from ruamel.yaml import YAML
94/2: yaml = YAML(typ='safe')
94/3:
with open("details.yml") as f:
    doc = yaml.load(f)
94/4: doc
94/5:
with open("details2.yml", 'w') as ft:
    yaml.safe_dump(doc, ft, default_flow_style=False)
94/6: from ruamel import yaml
94/7:
with open("details2.yml", 'w') as ft:
    yaml.safe_dump(doc, ft, default_flow_style=False)
95/1: from ruamel.yaml import YAML
95/2: yaml = YAML(typ='safe')
95/3: yaml.explicit_start=True
95/4: yaml.explicit_end=True
95/5:
with open("details.yml") as f:
    doc = yaml.load(f)
95/6:
with open("details.yml") as f:
    doc = yaml.loadi_all(f)
95/7:
with open("details.yml") as f:
    doc = yaml.load_all(f)
95/8: doc
95/9:
with open("details2.yml", 'w') as ft:
    yaml.safe_dump(doc, ft, default_flow_style=False)
95/10:
with open("details2.yml", 'w') as ft:
    yaml.dump_all(doc, ft, default_flow_style=False)
95/11:
with open("details2.yml", 'w') as ft:
    yaml.dump_all(doc, ft)
95/12:
with open("details2.yml", 'w') as ft:
    yaml.dump(doc, ft)
95/13: from ruamel import yaml
95/14:
with open("details2.yml", 'w') as ft:
    yaml.safe_dump(doc, ft, default_flow_style=False)
96/1: data = {'invoice-nr': 'refer1'}
96/2: from ruamel.yaml import YAML
96/3: help(YAML)
96/4: yaml = YAML(typ='safe')
96/5: yaml.dump_all(data)
96/6: import sys
96/7: yaml.dump_all(data, sys.stdout)
96/8: yaml.dump_all(data, sys.stdout)
96/9: yaml.default_flow_style=True
96/10: yaml.dump_all(data, sys.stdout)
96/11: yaml.default_flow_style=False
96/12: yaml.dump_all(data, sys.stdout)
96/13: yaml.explicit_start = True
96/14: yaml.dump_all(data, sys.stdout)
96/15: yaml.explicit_end = True
96/16: yaml.dump_all(data, sys.stdout)
96/17: yaml.explicit_end = False
96/18: yaml.dump_all(data, sys.stdout)
96/19: yaml.explicit_end = True
96/20: yaml.dump_all(data, sys.stdout)
96/21: yaml.default_flow_style=True
96/22: yaml.dump_all(data, sys.stdout)
96/23:
with open("details2.yml", 'w') as ft:
    yaml.dump_all(doc, ft)
96/24:
with open("details2.yml", 'w') as ft:
    yaml.dump_all(data, ft)
97/1: data = {'invoice-nr': 'refer1', 'dr': 735}
97/2: from ruamel.yaml import YAML
97/3: help(YAML)
97/4: yaml = YAML(typ='unsafe')
97/5: hel(yaml.default_flow_style)
97/6: yaml.default_flow_style=True
97/7: yaml.explicit_start=True
97/8:
with open("details2.yml", 'w') as ft:
    yaml.dump_all(data, ft)
97/9:
with open("details2.yml", 'w') as ft:
    yaml.dump(data, ft)
97/10: yaml.explicit_start=False
97/11:
with open("details2.yml", 'w') as ft:
    yaml.dump(data, ft)
97/12: yaml.explicit_start=True
97/13: yaml.default_style=False
97/14:
with open("details2.yml", 'w') as ft:
    yaml.dump_all(data, ft)
98/1: import collections
98/2: Invoice = collections.namedtuple('Invoice', 'day price')
98/3: inv = Invoice(6, 323)
98/4: inv
98/5: print("{} : {}".format(inv))
98/6: print("{} : {}".format(*inv))
98/7: print("{day} : {price}".format(*inv))
98/8: print("{} : {}".format(*inv))
98/9: 70 / 1400
98/10: 0.05 * 1000
99/1: a = 23.993098290938
99/2: b = format(a, '.2f')
99/3: b
100/1: a = 1222222.39098098
100/2: f = '{}'
100/3: g = lambda n: print(f.format(a))
100/4: g(a)
100/5: f = '{:,}'
100/6: g(a)
100/7: f = '{:,.}'
100/8: g(a)
100/9: f = '{:,.2f}'
100/10: g(a)
100/11: f = '{:d}'
100/12: g(a)
100/13: f = '{:f}'
100/14: g(a)
101/1: from subprocess import call
101/2: import subprocess
101/3: subprocess.run('make')
101/4: subprocess.run('make')
102/1: from datetime import datetime
102/2: d = datetime.now()
102/3: prefix = '{%Y%m%d}'.format(d)
102/4: prefix = '{:%Y%m%d}'.format(d)
102/5: prefix
103/1: input('Are you happy?')
103/2: input('Are you happy ? Yes/No')
103/3: input('Are you happy ? [Yes]/No :')
104/1:
with open('invoice.dat') as f:
    num = f.read()
104/2: num
104/3: int(num)
104/4: '{:d}'.format(int(num))
104/5: int('')
105/1: copyright
105/2: from datetime import datetime
105/3: datetime.today()
105/4: datetime.now()
105/5: d = datetime.today()
105/6: d
105/7: d.format('%Y')
105/8: '{:%d}'.format(d)
105/9: '{:%m}'.format(d)
105/10: '{:%M}'.format(d)
105/11: '{:%y}'.format(d)
105/12: '{:%Y}'.format(d)
105/13: '{:%c}'.format(d)
105/14: '{:%C}'.format(d)
105/15: '{:%a}'.format(d)
105/16: '{:%A}'.format(d)
105/17: '{:%b}'.format(d)
105/18: '{:%B}'.format(d)
105/19: d1 = d.month - 1
105/20: d1
105/21: '{:%B}'.format(d1)
105/22: d
105/23: d -1
105/24: d - datetime.datime.now()
105/25: d = datetime.datime.now()
105/26: d = datetime.datetime.now()
105/27: d = datetime.now()
105/28: d2 = datetime.now()
105/29: d2 - d
105/30: d
105/31: d2
105/32: dx = datetime.month()
105/33: dx = datetime.month()
105/34: dx = datetime.month
105/35: dx
105/36: dx = 0
105/37: dx
105/38: help(datetime)
105/39: d
105/40: if 9 == 9 : print('ok')
105/41: q
107/1: import subprocess
107/2: subprocess.run('ls')
107/3: subprocess.run('ls -l')
107/4: subprocess.run('[ls, l]')
107/5: help(subprocess)
107/6: subprocess.call('[ls, l]')
107/7: subprocess.call('ls -l')
107/8: help(subprocess)
107/9: subprocess.call(['ls' ,'-l'])
108/1: import datetime
108/2:
def monthdelta(date, delta):
    m, y = (date.month+delta) % 12, date.year + ((date.month)+delta-1) // 12
    if not m: m = 12
    d = min(date.day, [31,
        29 if y%4==0 and not y%400==0 else 28,31,30,31,30,31,31,30,31,30,31][m-1])
    return date.replace(day=d,month=m, year=y)
108/3: d = datetime.now()
108/4: d = datetime.datetime.now()
108/5: monthdelta(d, 1)
108/6: d
108/7: monthdelta(d, -1)
108/8:
def get_lastday(current):
    _first_day = current.replace(day=1)
    prev_month_lastday = _first_day - datetime.timedelta(days=1)
    return prev_month_lastday.replace(day=1)
108/9: get_lastday(d)
108/10:
def a_day_in_previous_month(dt):
   return dt.replace(day=1) - timedelta(days=1)
108/11: a_day_in_previous_month(d)
108/12: from datetime import datetime, timedelta
108/13: a_day_in_previous_month(d)
108/14: a_day_in_previous_month(d)
109/1: import wsgi
110/1: import
110/2: import sys
110/3: sys.argv
111/1: import django
112/1: import django
112/2: import django.conf.
112/3: import django.conf
112/4: from django import conf
112/5: help(conf)
112/6: clear
114/1: import os.path
114/2: os.path('/home/netsamir/, 'static')
114/3: os.path('/home/netsamir/', 'static')
114/4: os.path.join('/home/netsamir/', 'static')
114/5: os.path.join('/home/netsamir/', 'static/')
115/1: import os
115/2: os.environ(['HOME'])
115/3: os.environ['HOME']
116/1: import os
116/2: os.path.join('a', 'b')
117/1: Invoice = collections.namedtuple('Invoice', 'invoice_nr total')
117/2: import collections
117/3: Invoice = collections.namedtuple('Invoice', 'invoice_nr total')
117/4: inv = invoice(3, 4)
117/5: inv = Invoice(3, 4)
118/1: import yaml
118/2: f = open('client.yml')
118/3: vars = yaml.safe_load(f)
118/4: f.close()
118/5: vars
118/6: Invoice = collections.namedtuple('Invoice', 'num customer address1 address2 country vat total')¬
118/7: Invoice = collections.namedtuple('Invoice', 'num customer address1 address2 country vat total')
118/8: import collections
118/9: Invoice = collections.namedtuple('Invoice', 'num customer address1 address2 country vat total')
118/10: inv = Invoice(num=1, customer="sa", address1="2jk", address2="kjlkjlkj", country="be", vat="be9099", total=500)
118/11: inv
118/12: vars['Name']
118/13: vars.Name
118/14: out = "{invoice.number}".format(invoice)
118/15: out = "{invoice.number}".format(inv)
118/16: out = "{in.number}".format(inv)
118/17: out = "{inv.number}".format(inv)
118/18: out = "{number}".format(*inv)
118/19: inv
118/20: out = "{inv.num}".format(inv)
118/21: out = "{}".format(9)
118/22: out
118/23: print("{}".format(9))
118/24: print("{}".format(inv.num))
118/25: print("{inv.num}".format(inv.num))
118/26: print("{inv[num]}".format(inv))
118/27: print("{0[num]}".format(inv))
118/28: print("{inv[num]}".format(inv))
118/29: inv
118/30: inv['num']
118/31: inv('num')
118/32: inv.num
118/33: print("{inv.num}".format(inv))
118/34: print("{}".format(inv))
118/35: print("{}".format(*inv))
118/36: print("{num}".format(*inv))
118/37: print("{inv.num}".format(*inv))
118/38: print("{num}".format(num=inv.num))
118/39:
Test = namedtuple('Test', ['this', 'that'])
my_test = Test(this=1, that=2)
print("my_test = {0!r}".format(my_test))
118/40:
Test = collections.namedtuple('Test', ['this', 'that'])
my_test = Test(this=1, that=2)
print("my_test = {0!r}".format(my_test))
118/41: print("{0!r}".format(inv))
118/42: print("{} {} {}".format(inv))
118/43: print("{} {} {} {} {} {} {}".format(inv))
118/44: print("{} {} {} {} {} {} {}".format(inv))
118/45: print("{} {} {} {} {} {} {}".format(*inv))
118/46: print("{} {} {} {} {} {} {0}".format(*inv))
118/47: print("{6} {5} {4} {3} {2} {1} {0}".format(*inv))
118/48: print("{6} {5} {4} {3} {2} {1} {num}".format(*inv))
118/49: print("{6} {5} {4} {3} {2} {1} {0}".format(inv))
118/50: print("{6} {5} {4} {3} {2} {1} {0}".format(**inv))
118/51: print("{} {} {} {} {} {} {}".format(inv))
118/52: print("{6} {5} {4} {3} {2} {1} {0}".format(*inv))
118/53: print("{6:,.2f} {5} {4} {3} {2} {1} {0}".format(*inv))
119/1: import yaml
121/1: inv = Invoice(num=1, customer="sa", address1="2jk", address2="kjlkjlkj", country="be", vat="be9099", total=500)
121/2: import collections
121/3: Invoice = collections.namedtuple('Invoice', 'num customer address1 address2 country vat total')
121/4: inv = Invoice(num=1, customer="sa", address1="2jk", address2="kjlkjlkj", country="be", vat="be9099", total=500)
121/5: inv
121/6:
show_inv_details = lambda invoice: textwrap.dedent("""\
--------------------------------------------------------------
INVOICE
--------------------------------------------------------------
Invoice No           : {:d}
Customer             : {}
Address1             : {}
Address2             : {}
Country              : {}
VAT                  : {}
Total                : {:9,.2f} EUR
""").format(*invoice)
121/7: show_inv_details(inv)
121/8: import textwrap
121/9: show_inv_details(inv)
121/10: details_total = ([('renewa', 90), ('kjk', 89)], 899)
121/11: details_total
121/12: total = details_total[1]
121/13: total
121/14: task = details_total[0][0]
121/15: task
121/16: task = details_total[0]
121/17: task
121/18: task = details_total[0][0][0]
121/19: task
121/20: import system
121/21: import sys
121/22: sys.exit(0)
122/1: import jinja2
123/1: import jinja2
123/2: help(jinja2)
123/3: ls
123/4: import yaml
123/5: invoice = Invoice('Invoice', 'num name address')
123/6: from collections import namedtuple
123/7: invoice = Invoice('Invoice', 'num name address')
123/8: invoice = namedtuple('Invoice', 'num name address')
123/9: i1 = Invoice(2, "samir", 'Malta")
123/10: i1 = Invoice(2, "samir", 'Malt')
123/11: i1 = Invoice(2, "samir", "Malta")
123/12: i1 = invoice(2, "samir", "Malta")
123/13: i1
123/14: yaml.BaseDumper(i1)
123/15:
for line in yaml.BaseDumper(i1):
    print(line)
123/16: help(yaml)
123/17: yaml.dump(i1)
123/18: help(yaml)
123/19: yaml.safe_dump(i1)
123/20: i1 = invoice("2", "samir", "Malta")
123/21: yaml.safe_dump(i1)
123/22: i1
123/23: yaml.safe_dump_all(i1)
123/24: print(yaml.safe_dump_all(i1))
123/25: print(yaml.dump_all(i1))
123/26: print(yaml.dump(i1))
124/1: import sqlalchemy
124/2: sqlalchemy.__version__
124/3: from sqlalchemy import create_engine
124/4: engine = create_engine('sqlite:///:memory:', echo=True)
124/5: from sqlalchemy.ext.declarative import declarative_base
124/6: Base = declarative_base()
125/1: from sqlalchemy.ext.declarative import declarative_base
125/2: engine = create_engine('sqlite://invoices.db:', echo=True)
125/3: from sqlalchemy import create_engine
125/4: engine = create_engine('sqlite://invoices.db:', echo=True)
125/5: engine = create_engine('sqlite:///invoices.db:', echo=True)
125/6: Base = declarative_base()
125/7: from sqlalchemy import Column, Integer, String
125/8:
class Client(Base):
    __tablename__ = 'clients'
125/9:
class Client(Base):
    __tablename__ = 'clients'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    address1 = Column(String)
    address2 = Column(String)
    country = Column(String)
    vat = Column(String)
    registration = Column(String)
    def __repr__(self):
        return "<Client(name={}, address1={}, address2={}, country={}, vat={}, registration={}>".format(self.name, self.address1, self.address2, self.country, self.vat, self.registration)
126/1: from sqlalchemy import create_engine
126/2: from sqlalchemy import Column, Integer, String
126/3: engine = create_engine('sqlite:///invoices.db:', echo=True)
126/4: Base = declarative_base()
126/5: from sqlalchemy.ext.declarative import declarative_base
126/6: Base = declarative_base()
126/7:
class Client(Base):
    __tablename__ = 'clients'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    address1 = Column(String)
    address2 = Column(String)
    country = Column(String)
    vat = Column(String)
    registration = Column(String)
    def __repr__(self):
        return "<Client(name={}, address1={}, address2={}, country={}, vat={}, registration={}>".format(self.name, self.address1, self.address2, self.country, self.vat, self.registration)
126/8: Client.__table__
126/9: Base.metadata.create_all(engine)
126/10: clear
126/11: import yaml
126/12: f = open('/home/netsamir/Documents/E83/Customers/Amira/client.yml')
126/13: amira = yaml.safe_load(f)
126/14: f.close()
126/15: amira
126/16: *amira
126/17: amira_client = Client(amira)
126/18: help(Client)
126/19: amira_client = Client(*amira)
126/20: amira_client = Client(**amira)
126/21: amira_client = Client(**amira)
126/22: clear
126/23: amira_client
126/24: client
126/25: amira
126/26: lower('A')
126/27: 'A'.lower()
126/28: 'AVc'.lower()
126/29: for amira.items():
126/30:
for k, v in amira.items():
    print(k, v)
126/31: amira_client = Client(**{k.lower(), v for f, v in amira.items()})
126/32: amira_client = Client(**{ k.lower(): v for f, v in amira.items()})
126/33: amira_client
126/34: a = { k.lower(): v for f, v in amira.items()}
126/35: a
126/36: a = { k.lower(): v for k, v in amira.items()}
126/37: a
126/38: amira_client = Client(**{ k.lower(): v for k, v in amira.items()})
126/39: amira_client
126/40: from sqlalchemy.orm import sessionmaker
126/41: Session = sessionmaker(bind=engine)
126/42: Session = sessionmaker()
126/43: session = Session()
126/44: session.add(amira_client)
126/45: session.commit()
126/46: Session.configure(bind=engine)
126/47: session = Session()
126/48: session.add(amira_client)
126/49: session.commit()
127/1: value = 'samir'
127/2: new = value or 'oana'
127/3: new
127/4: value = None
127/5: new = value or 'oana'
127/6: value = None
127/7: new = value or 'oana'
127/8: new
128/1: value = 'samir'
128/2: value = 'rami' or value
128/3: value
128/4: value = 'samir'
128/5: value = None or value
128/6: value
128/7: isinstance(value, type)
128/8:
class Value(object):
    """ a value """
128/9: value = Value()
128/10: isinstance(value, type)
128/11:
class Value:
    """ a value """
128/12: isinstance(value, type)
128/13:
class Value(type):
    """ a value """
128/14: isinstance(value, type)
130/1: import django
130/2: from django.forms import Field
130/3: from django import forms
130/4: import html
131/1: from django import forms
131/2: simple = forms.Field()
131/3: simple
131/4: simple.to_python(5)
131/5: simple.widget
131/6: simple.validat(5)
131/7: simple.validate(5)
131/8: simple.label
131/9: simple.widget
131/10: simple2 = forms.Field()
131/11: simple2.widget
131/12:
class Samir:
    def __init__(self, *, required=True):
        self.required = required
131/13: s = Samir()
131/14: s
131/15: s.required
131/16:
class SamirOana:
    def __init__(self, bebe, required=True):
        self.required = required
        self.bebe = bebe
131/17: s2 = SamirOana(bebe="Simone")
131/18: s2
131/19: s2.bebe
131/20: s2.required
131/21:
class SamirOana(Samir):
    def __init__(self, bebe):
        self.bebe = bebe
131/22: s2 = SamirOana(bebe="Simone")
131/23: s2.required
131/24:
def multipy(*):
    z = 1
131/25:
class M:
    def multipy(self, *, z=1):
        for num in args:
            z =* num
131/26:
class M:
    def multipy(self, *, z=1):
        for num in args:
            z *= num
        print(z)
131/27: m.M()
131/28: m = M()
131/29: m.multipy(4, 5)
131/30: m.multipy()
131/31: simple2 = forms.Field()
132/1: from django import forms
132/2: forms.__all__
132/3: from django.forms import fields
132/4: fields.__all__
132/5: f = Field()
132/6: f = fields.Field()
132/7: c = fields.CharField()
132/8: c
132/9: c == f
132/10: c.widget
132/11: f.widget
132/12: f.validators
132/13: f.validators.append('samir')
132/14: f.validators
132/15: g.validators
132/16: c.validators
132/17: f1 = fields.Field()
132/18: f1.validators
132/19: f1.validators.append('rami')
132/20: f1.validators
132/21: f.validators
133/1: ll
133/2: import make_release
133/3: cd ..
133/4: ll
133/5: make_release.parse_changelog()
133/6: make_release.parse_changelog()
133/7: make_release.parse_changelog()
133/8: make_release.parse_changelog()
134/1: make_release.parse_changelog()
134/2: import make_release
134/3: make_release.parse_changelog()
135/1: from scripts import make_release
135/2: make_release.parse_changelog()
136/1: import howdoi
136/2: import howdoi
136/3: import os
136/4: os.getenv('PAPA')
136/5: os.getenv('PAPA', 'default')
137/1: from threading import local
137/2: local
137/3: local()
137/4: getattr(local(), 'stack')
137/5: local
137/6: help(local)
137/7: local
137/8: _local = local()
137/9: _local
137/10: type(_local)
138/1: "sssss".count('s')
138/2: import click
138/3: help(click.BaseCommand)
138/4: import sys
138/5:  sys.modules[__name__.rsplit('.', 1)[0]]
138/6:  sys.modules[__name__.rsplit('.', 1)]
138/7: hasattr(sys, '_getframe')
138/8: sys._getframe
138/9: help(sys._getframe)
138/10: sys._getframe(1)
138/11: sys._getframe(1)
138/12: make_str('samir')
139/1: import osconfeed
139/2: feed = load()
139/3: feed = osconfeed.load()
139/4: clear
139/5: feed = osconfeed.load()
139/6: feed
139/7: sorted(feed['Schedule'].keys())
140/1: import shelve
140/2: import schedule2
140/3: from schedule2 import *
140/4: db = shelve.open(DB_NAME)
140/5: if CONFERENCE not in db: load_db(db)
140/6: db
140/7: db.keys()
140/8: db.get()
140/9: import osconfeed
140/10: clear
140/11: feed = osconfeed.load()
140/12: feed
140/13:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(cls_name)
140/14: globals()
140/15: type(globals())
140/16: globals().get('Venue')
140/17:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(cls_name)
140/18: cls = globals().get('Venue', DbRecord)
140/19: cls
140/20: cls.mro
140/21: cls.mro()
140/22: cls.get('Venue')
140/23: cls = globals().get('Venue')
140/24: cls
140/25: globals().get('Venue')
140/26: db
140/27: db.get('Venue')
140/28: db.items()
140/29:
for k in db.keys():
    print(k)
140/30:
for k in sorted(db.keys()):
    print(k)
140/31: db.get('speaker.116050')
140/32: print(db.get('speaker.116050'))
140/33: spk = db.get('speaker.116050')
140/34: spk.name
140/35: spk.bio
140/36: spk.photo
140/37: evn = db.get('event.37629')
140/38: evn
140/39: type(evn)
140/40: evn.venue
140/41: spk
140/42: dict(spk)
140/43: spk.__dict__
140/44:
for k, v in spk.items():
    print('%s : %s' % k, v)
140/45:
for k, v in spk.__dict__.items():
    print('%s : %s' % k, v)
140/46:
for k, v in spk.__dict__.items():
    print('%s : %s' % (k, v))
140/47: evn.__dict__
140/48: spk == spk
140/49: spk == evn
140/50: global
140/51: globals
140/52: globals()
141/1: globals()
141/2: locals()
141/3: globals()
141/4: __builtin__.__dict__
141/5: __builtins__.__dict__
141/6: __builtins__.__dict__ == __builtin__.__dict__
141/7: globals()
141/8: globals().get('quit')
141/9: globals().get('max')
141/10: globals()
141/11: globals().get('range')
141/12: globals().get(6)
141/13: globals()
141/14: globals().get(6)
141/15: globals()
141/16: globals().get('exit')
141/17: globals().__dict__.keys()
141/18: globals().keys()
141/19: globals().get('In')
141/20: globals().get('Out')
141/21: globals().del('Out')
141/22: globals
141/23: g = globals()
141/24: globals.clear()
141/25: globals().clear()
141/26: globals
141/27: globals()
141/28: globals()
142/1: globals()
142/2: _
142/3: import osconfeed
142/4: globals()
142/5: feed = osconfeed.load()
142/6: globals()
142/7: globals().keys()
142/8: globals().__doc__
142/9: feed.keys()
142/10: feed['Schedule']
142/11: feed['Schedule'].keys()
142/12:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(cls_name)
142/13: globals().get('Venue')
142/14:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    cls = globals().get(cls_name, DbRecord)
142/15: from schedule2 import *
142/16:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    cls = globals().get(cls_name, DbRecord)
142/17: globals().get('Venue')
142/18:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    cls = globals().get(cls_name, DbRecord)
    print(cls)
142/19: globals().get('Event')
142/20: globals().get('Record')
142/21: globals().keys()
142/22: import inspect
142/23: inspect.__dict__
142/24: inspect.__dict__.keys()
142/25: import pprint
142/26: pprint(inspect.__dict__.keys())
142/27: pprint.print((inspect.__dict__.keys()))
142/28: pprint.pprint(inspect.__dict__.keys())
142/29: clear
142/30:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
142/31:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(cls_name)
142/32:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(rec_list)
143/1: import osconfeed
143/2: from schedule2 import *
143/3: feed = osconfeed.load()
143/4: feed['Schedule']
143/5: feed['Schedule'].items()
143/6: feed['Schedule'].items()[0]
143/7:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(rec_list)
143/8:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    rec_list[0]
143/9:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(rec_list[0])
143/10:
for collection, rec_list in feed['Schedule'].items():
    record_type = collection[:-1]
    cls_name = record_type.capitalize()
    print(cls_name)
143/11: feed['Schedule']['Conference']
143/12: feed['Schedule']['conference']
143/13: feed['Schedule']
143/14: feed['Schedule']['conferences']
143/15: feed['Schedule']['venues']
143/16: feed
143/17: feed['Schedule']['conferences']
143/18: feed['Schedule']['venues']
143/19: feed['Schedule']['speakers']
143/20: feed['Schedule']['conferences'].keys()
143/21: feed['Schedule']['conferences']
143/22: feed['Schedule'].keys()
143/23: len(feed['Schedule']['conferences'])
143/24: len(feed['Schedule']['events'])
143/25: len(feed['Schedule']['speakers'])
143/26: feed['Schedule']['conferences']
143/27:
for record in feed['Schedule']['conferences']:
    key = '{}.{}'.format('conference', record['serial'])
143/28:
for record in feed['Schedule']['conferences']:
    key = '{}.{}'.format('conference', record['serial'])
    print(key)
143/29: key
143/30:
for record in feed['Schedule']['conferences']:
    key = '{}.{}'.format('conference', record['serial'])
    record['serial'] = key
    print(record['serial'])
143/31: import shelve
143/32: db = shelve.open(DB_NAME)
143/33:
class MyRec:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
143/34: r = {'name': 'samir', 'age': 32, 'married': True}
143/35: r
143/36: m1 = MyRec(**r)
143/37: print(r)
143/38: print(**r)
143/39: m1
143/40: m1.__dict__
143/41: m1.age
143/42: m1.married
143/43: m1.name
143/44: r = {'name': 'samir', 'age': 32, 'married': True, 'children': ['Simone', 'Adam']}
143/45: m2 = MyRec(**r)
143/46: m1.name
143/47: m2.name
143/48: m2.children
143/49: db
143/50: db.keys()
143/51:
for k in db.keys():
    print(k)
143/52:
for k in sorted(db.keys()):
    print(k)
144/1: import subprocess
144/2: p = subprocess.Popen('ping -c 10 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/3: help(p)
144/4: p.poll()
144/5: p.poll()
144/6: p = subprocess.Popen('ping -c 10 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/7: p.poll()
144/8: p.poll()
144/9: p.poll()
144/10: subprocess.check_call('ping -c 10 localhost'.split())
144/11: subprocess.call('ping -c 10 localhost'.split())
144/12: import _subprocess
144/13: help(subprocess.PIPE)
144/14: p = subprocess.Popen('ping -c 10 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/15: help(p)
144/16: p.communicate()
144/17: p = subprocess.Popen('ping -c 10 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/18: p.stdout.read()
144/19: p = subprocess.Popen('ping -c 10 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/20:
for line in p.stdout:
    print(line)
144/21: p = subprocess.Popen('ping -c 100 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/22:
for line in p.stdout:
    print(line)
144/23: help(threading)
144/24: import threading
144/25: help(threading.Thread)
144/26: with open('log.txt', 'r) as fd:
144/27:
with open('log.txt', 'r') as fd:
    for line in fd:
        print(line)
144/28:
with open('log.txt', 'r') as fd:
    for line in fd.readline():
        print(line)
144/29:
with open('log.txt', 'r') as fd:
    for line in fd:
        print(line)
144/30: p = subprocess.Popen('ping -c 100 localhost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
144/31: p.stdout
144/32: p.stdout
144/33: p.stdout
144/34: p.stdout.readline()
144/35: p.stdout.readline()
144/36: p.stdout.readline()
144/37: p.stdout.readline()
144/38: p.stdout.readline()
144/39: p = subprocess.Popen('echo', shell=True, stdin='hello', stderr=subprocess.PIPE)
144/40: p = subprocess.Popen('echo', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/41: p.communicate(input='hello')
144/42: p.communicate(input=b'hello')
144/43: p = subprocess.Popen('echo', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/44: p.stdout
144/45: p.communicate(input=b'hello')
144/46: p = subprocess.Popen('echo', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/47: p.communicate(input=b'hello')
144/48: p = subprocess.Popen('echo', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/49: o, e = p.communicate(input=b'hello')
144/50: o
144/51: print(o)
144/52: p = subprocess.Popen('echo', shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/53: o, e = p.communicate(input=b'hello')
144/54: print(o)
144/55: print(o)
144/56: p = subprocess.Popen('echo', shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/57: o, e = p.communicate(input='hello'.encode())
144/58: print(o)
144/59: p = subprocess.Popen(['echo'], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
144/60: o, e = p.communicate(input='hello'.encode())
144/61: print(o)
144/62: p
144/63: p.stdout
144/64: help(p.stdout)
144/65: help(p.stdout)
144/66: import asyncio
144/67: with open('log.txt', 'a+') with fd:
144/68:
with open('log.txt', 'a+') as fd:
    p = subprocess.Popen(COMMAND, stdout=fd, stderr=fd, shell=True)
    return p.poll()
144/69:
with open('log.txt', 'a+') as fd:
    p = subprocess.Popen(COMMAND, stdout=fd, stderr=fd, shell=True)
144/70: COMMAND = 'ping -c 10 localhost'
144/71:
with open('log.txt', 'a+') as fd:
    p = subprocess.Popen(COMMAND, stdout=fd, stderr=fd, shell=True)
144/72: p.poll()
144/73: p.poll()
144/74: p.poll()
144/75: p.poll()
144/76:
with open('log.txt', 'a+') as fd:
    p = subprocess.Popen(COMMAND, stdout=fd, stderr=fd, shell=True)
    p.communicate()
144/77:
with open('log.txt', 'a+') as fd:
    p = subprocess.Popen(COMMAND, stdout=fd, stderr=fd, shell=True)
    o, e = p.communicate()
    print(o)
144/78:
with open('log.txt', 'a+') as fd:
    p = subprocess.Popen(COMMAND, stdout=fd, stderr=fd, shell=True)
    p.wait()
145/1: import collection.abc
145/2: import collections.abc
145/3: help(collections.abc)
145/4: return 8 or 0
145/5: from abc import ABCMeta, abstracmethod
145/6: from abc import ABCMeta, abstractmethod
145/7: float(3)
145/8: s=""
145/9: s
145/10: float(s or 3)
145/11: a = 8, 9
145/12: a
145/13: g, m = a
145/14: lines = zip('a b c d'.split(), range(1, 5))
145/15: lines
145/16:
for l in lines:
    print(l)
145/17: lines
145/18:
for l in lines:
    print(l)
145/19: reduce
145/20: from itertools import reduce
145/21: from itertools import reduce
145/22: from functools import reduce
145/23: reduce(range(1, 9))
145/24: from operator import add
145/25: reduce(add, range(1, 9))
145/26: help(reduce)
145/27:
map(lamdba x,y : x, zip('a b c d'.split(), range(1, 5))

)
145/28: map(lambda x,y : x, zip('a b c d'.split(), range(1, 5)))
145/29: list(map(lambda x,y : x, zip('a b c d'.split(), range(1, 5))))
145/30: list(map(lambda (x,y) : x, zip('a b c d'.split(), range(1, 5))))
145/31: list(zip('a b c d'.split(), range(1, 5)))
145/32: help(functools)
145/33: fst = lambda x, y : x
145/34: fst(3,0)
145/35: list(map(fst, zip('a b c d'.split(), range(1, 5))))
145/36: fst = lambda (x, y) : x
145/37: fst = lambda x, y : x
145/38: list(map(lambda x: x[0], zip('a b c d'.split(), range(1, 5))))
145/39: list(map(lambda x: x[1], zip('a b c d'.split(), range(1, 5))))
145/40: list(sum(map(lambda x: x[1], zip('a b c d'.split(), range(1, 5)))))
145/41: sum(map(lambda x: x[1], zip('a b c d'.split(), range(1, 5))))
145/42: clear
146/1: import invoice
147/1: import invoice
147/2:
if not None:
    print('ok')
147/3: import invoice
147/4: f = '/home/netsamir/Documents/E83/Customers/Hazal/client.yml'
147/5: c = invoice.Customer(f)
147/6: c
147/7: c.__client
147/8: c.keys()
147/9: c.__dict__
147/10: c.__dict__.'_Customer_client'
147/11: c.__dict__['_Customer_client']
147/12: c
147/13: help(c)
147/14: help(c)
147/15: import invoice
147/16: c = invoice.Customer(f)
147/17: c
147/18: c.keys()
148/1: import invoice
148/2: f = '/home/netsamir/Documents/E83/Customers/Hazal/client.yml'
148/3: c = invoice.Customer(f)
148/4: c
148/5: c.keys()
148/6: import invoice
148/7: c = invoice.Customer(f)
148/8: c.keys()
148/9: import invoice
148/10: c = invoice.Customer(f)
148/11: c.keys()
148/12: import invoice
148/13: c = invoice.Customer(f)
148/14: c.keys()
148/15: import invoice
148/16: c = invoice.Customer(f)
148/17: c.keys()
148/18: import os
148/19: os.environ('PWD')
148/20: os.environ['PWD']
148/21: os.path.join(os.environ['PWD'], 'client.yml')
148/22: import invoice
148/23: c = invoice.Customer(f)
148/24: c
148/25: c.__dict__
148/26: c.Name
148/27: c.VAT
148/28: c._Customer__client
148/29: c._Customer__client.Name
148/30: import invoice
148/31: c = invoice.Customer(f)
148/32: c
148/33: c.Name
148/34: c.__dict__
148/35: import invoice
148/36: c = invoice.Customer(f)
148/37: c.__dict__
148/38: import invoice
148/39: c = invoice.Customer(f)
148/40: c.__dict__
148/41: c.Name
148/42: import invoice
148/43: c = invoice.Customer(f)
148/44: c.__dict__
149/1: import invoice
149/2: f = '/home/netsamir/Documents/E83/Customers/Hazal/client.yml'
149/3: c = invoice.Customer(f)
149/4: c.__dict__
149/5: c.Name
149/6: f = '/home/netsamir/Documents/E83/Customers/Hazal/client.yml'
149/7: import invoice
149/8: c = invoice.Customer(f)
149/9: c.Name
149/10: c.__dict__
150/1: import invoice
150/2: c = invoice.Customer(f)
150/3: f = '/home/netsamir/Documents/E83/Customers/Hazal/client.yml'
150/4: c = invoice.Customer(f)
150/5: c
150/6: c.__dict__
150/7: import invoice
150/8: c = invoice.Customer(f)
150/9: c.__dict__
150/10: c.__data
150/11: import invoice
150/12: c = invoice.Customer(f)
150/13: c.__dict__
150/14: c.Name
150/15:
class A:
    @staticmethod
    def a():
        print('static')
    def b():
        A.a()
150/16:
class A:
    @staticmethod
    def a():
        print('static')
    def b(self):
        A.a()
150/17: a = A()
150/18: a.b()
150/19:
class A:
    @staticmethod
    def a():
        print('static')
    def b(self):
        a()
150/20: a = A()
150/21: a.b()
151/1: import sqlalchemy
151/2: import peewee
151/3: import django
153/1: import sqlalchemy
154/1: 715.50 * 1.25
150/22:  a = 2, 4
150/23:  a = (2, 4)
150/24: a
150/25: from operator import itemgetter
155/1: from operator import itemgetter
155/2: a = (3, 9)
155/3: fst = lambda a: itemgetter(0)
155/4: fst(a)
155/5: fst = itemgetter(0)
155/6: fst(a)
155/7: a = []
155/8: b = [8, 0, 0]
155/9: a.append(b)
155/10: a
155/11: a.extend(b)
155/12: a
155/13: a = None
155/14:
if not a:
    print('ok')
155/15: a = 'a'
155/16:
if not a:
    print('ok')
155/17:
if not a:
    print('ok')
155/18: a = None
155/19:
if not a:
    print('ok')
155/20:
class A:
    a = 'AA'
155/21: a = A
155/22: a.a
155/23:
class A:
    a = 'AA
155/24:
class A:
    a = 'AA'
    def f(self):
        print(self.a)
155/25: a = A()
155/26: a.f()
156/1: import invoice
156/2: import invoice
156/3: ci = invoice.ConsultancyInvoice()
156/4: 0.3/8
156/5: 0.3/8
156/6:
for i in (('a', 'b'), ):
      print(i)
157/1:
for i in (('a', 'b'), ):
      print(i)
158/1: r = '0' if 0 else '1'
158/2: r
159/1:
class A:
    def __init__(self):
        self.a = '34'
159/2:
class A:
    def __init__(self):
        self.a = '34'
        self.b = '39'
        self.c = 'yy'
159/3: show = "{0:a} {0:b}"
159/4: show.format(self)
159/5: show.format(A())
159/6: a = A()
159/7: a
159/8: **a
159/9: __dict__
159/10: a.__dict__
159/11: show.format(a.__dict__)
159/12: show = "{:a} {:b}"
159/13: show.format(a.__dict__)
159/14: help(format)
159/15: show.format(**a.__dict__)
159/16: show = "{0:a} {0:b}"
159/17: show.format(**a.__dict__)
159/18: show = "{a} {b}"
159/19: show.format(**a.__dict__)
160/1: import django
162/1: import yaml
162/2:
with open('client.yml') as fd:
    cli = yaml.safe_load(fd)
162/3: cli
162/4: import glob
162/5: dir = '/home/netsamir/Documents/E83/Customers/'
162/6: help(glob)
162/7:
for f in glob.glob('client.yml', recurisve=True):
    print(f)
162/8:
for f in glob.glob('client.yml', recursive=True):
    print(f)
162/9: import os
162/10:
for f in glob.glob(os.path.join(dir, '**/client.yml'), recursive=True):
    print(f)
162/11:
clients = []
for f in glob.glob(os.path.join(dir, '**/client.yml'), recursive=True):
    with open(f) as fd:
        clients.append(yaml.safe_load(f))
162/12: clients
162/13:
clients = []
for f in glob.glob(os.path.join(dir, '**/client.yml'), recursive=True):
    with open(f) as fd:
        clients.append(yaml.safe_load(fd))
162/14: clients
162/15: len(clients)
162/16: qs = QuerySet()
163/1: import csv
163/2:
with open('Watches-Clocks-Txt.csv') as fd:
    content = csv.reader(fd.read())
163/3: help(csv)
163/4:
with open('Watches-Clocks-Txt.csv') as fd:
    content = csv.reader(fd)
163/5: content
163/6: content[0]
163/7: con = list(content)
163/8:
for row in content:
    print(row)
163/9:
with open('Watches-Clocks-Txt.csv') as fd:
    content = csv.reader(fd)
163/10: content
163/11: help(content)
163/12:
for i in content:
    print(i)
163/13:
with open('Watches-Clocks-Txt.csv') as fd:
    content = list(csv.reader(fd))
163/14: import request
163/15: import request
163/16: import requests
163/17: from requests_html import HTMLSession
163/18: clear
163/19: from requests_html import HTMLSession
164/1: from requests_html import HTMLSession
167/1:
exit(
)
168/1: from requests_html import HTMLSession
168/2: from requests_html import HTMLSession
169/1: from requests_html import HTMLSession
169/2: import lxml.html
169/3: from requests_html import HTMLSession
170/1: from requests_html import HTMLSession
170/2: import sys
170/3: sys.path
171/1: from requests_html import HTMLSession
171/2: session = HTMLSession()
171/3: url = "https://www.chrono24.fr/search/index.htm"
171/4: r = session.get(url)
171/5: local_url = "/home/netsamir/Webfactional/webapps/Hazal_Muller/data/www.chrono24.fr_search_index.htm"
171/6: r = session.get(local_url)
171/7: local_url = "http://localhost:8000/www.chrono24.fr_search_index.htm"
171/8: r = session.get(local_url)
171/9: r
171/10: r.html.links
171/11: brands = r.html.find("#wristwatches")
171/12: brands
171/13: brands = r.html.find('#wristwatches')
171/14: brands
171/15: r.html
171/16: brands = r.html.find('#anti-flicker')
171/17: brands
171/18: r = session.get(local_url)
171/19: r = session.get(local_url)
171/20: brands = r.html.find('#wristwatches')
171/21: brands
171/22: brands.text
171/23: brd = brands[0]
171/24: brd.txt
171/25: brd.text
171/26: brd.html
171/27: brd.find('option')
171/28:
for b in brd.find('option'):
    b.text
171/29:
for b in brd.find('option'):
    print(b.text)
171/30: brd.find('option')
171/31: import re
171/32: id = re.compile(r'\d+')
171/33: id.match("5")
171/34: id.match("15")
171/35: id.match("a")
171/36:
for b in brd.find('option'):
    if id.match(b.value):
        print(b.text)
171/37:
for b in brd.find('option'):
    if id.match(b['value']):
        print(b.text)
171/38:
for b in brd.find('option'):
    b
171/39:
for b in brd.find('option'):
    print(b)
171/40:
for b in brd.find('option'):
    print(b.attrs)
171/41:
for b in brd.find('option'):
    print(b['value'])
171/42:
for b in brd.find('option'):
    print(b.value)
171/43:
for b in brd.find('option'):
    print(b.attrs['value'])
171/44:
for b in brd.find('option'):
    try:
        if id.match(b.attrs['value']):
            print(b.text)
    except KeyError:
        pass
171/45:
for b in brd.find('option'):
    print(b.attrs['value'])
171/46:
for b in brd.find('option'):
    print(b.attrs)
171/47: brd.html
171/48: select = brd.find('select')
171/49: select
171/50: select
171/51: type(select)
171/52: select[0].name
171/53: select[0]['name']
171/54: select[0].attrs
171/55: select[0].attrs['name']
171/56: man = select[0]
171/57: man
171/58: man.html
171/59: man
171/60:
for el in man:
    man
171/61:
for el in man.find('option'):
    el
171/62:
for el in man.find('option'):
    print(el)
171/63:
for el in man.find('option'):
    print(el.text)
171/64:
for b in man.find('option'):
    try:
        if id.match(b.attrs['value']):
            print(b.text)
    except KeyError:
        pass
171/65: [ brand.text for brand in man.find('option') if id.match(b.attrs['value'])]
171/66: brands = [brand.text for brand in man.find('option') if id.match(b.attrs['value'])]
171/67: brands = set([brand.text for brand in mand.find('option') if id.match(brand.attrs['value'])])
171/68: brands = set([brand.text for brand in man.find('option') if id.match(brand.attrs['value'])])
171/69: b
171/70: brands = set([brand.text for brand in man.find('option'))])
171/71: brands = set([brand.text for brand in man.find('option')])
171/72: brands
171/73: brands = [brand.text for brand in man.find('option')]
171/74: brands
171/75: brands = [brand for brand in man.find('option')][0]
171/76: brands
171/77: brands.value
171/78: brands['value']
171/79: brands.attrs['value']
171/80: brands = set([brand.text for brand in man.find('option') if id.match(brand.attrs['value'])])
171/81: select = brd.find('select')
171/82: select
171/83: brd.find('option')
171/84: select_content = r.html.find('#wristwatches', first=True)
171/85: select_content
171/86: select_content = r.html.find('#wristwatches', first=True).select('select')
171/87: select_content = r.html.find('#wristwatches', first=True)
171/88: select_content
171/89: select_content,select('select')
171/90: select_content.select('select')
171/91: select_content[0]select('select')
171/92: select_content[0].select('select')
171/93: select_content
171/94: select_content.find('select')
171/95: select_content = r.html.find('#wristwatches', first=True).find('select')
171/96: select_content
171/97: r = session.get(local_url)
171/98: select_content = r.html.find('#wristwatches', first=True).find('select')
171/99: brands = set([brand.text for brand in man.find('option') if 'value' in brand.attrs])
171/100: brands
171/101: brands = set([brand.text for brand in man.find('option') if 'value' in brand.attrs and id.match(brand['value'])])
171/102: brands = set([brand.text for brand in man.find('option') if 'value' in brand.attrs and id.match(brand.attrs['value'])])
173/1: import feed_database
173/2: import feed_database
173/3: import feed_database
173/4: c = feed_database.Chrono24()
173/5: c.manufacturers
173/6: brands = set([brand.text for brand in man.find('option') if 'value' in brand.attrs and id.match(brand.attrs['value'])])
171/103: brands = set([brand.text for brand in man.find('option') if 'value' in brand.attrs and id.match(brand.attrs['value'])])
171/104: man = select[0]
173/7: brands = set([brand.text for brand in man.find('option') if 'value' in brand.attrs and id.match(brand.attrs['value'])])
174/1: import feed_database
174/2: c = feed_database.Chrono24()
174/3: c.manufacturers
174/4: import feed_database
174/5: c = feed_database.Chrono24()
174/6: c.manufacturers
175/1: import feed_database
175/2: c = feed_database.Chrono24()
175/3: c.manufacturers
176/1: import feed_database
176/2: c = feed_database.Chrono24()
176/3: c.manufacturers
177/1: import feed_database
177/2: c = feed_database.Chrono24()
177/3: c.manufacturers
178/1: import feed_database
178/2: c = feed_database.Chrono24()
178/3: c.manufacturers
178/4: len(c.manufacturers)
178/5: max_f = max(c.manufacturers, key=len)
178/6: max_F
178/7: max_f
178/8: len(max_f)
178/9: c.manufacturers
178/10: max_f = max(c.manufacturers, key=len)
178/11: max_f
171/105: select
171/106: select[1]
171/107:
for i in select[1]:
    print(i)
171/108:
for i in select[1].find('option'):
    print(i)
171/109:
for i in select[2].find('option'):
    print(i)
171/110:
for i in select[2].find('option'):
    print(i.text)
171/111:
for i in select[3].find('option'):
    print(i.text)
171/112:
for i in select[4].find('option'):
    print(i.text)
171/113:
for i in select[5].find('option'):
    print(i.text)
179/1: import feed_database
179/2: c = feed_database.Chrono24()
179/3: c.manufacturers
179/4: eixt
180/1: import feed_database
180/2: c = feed_database.Chrono24()
180/3: c.manufacturers
180/4: c.watch_categories
180/5: c.case_materials
180/6: c.gender
180/7: c.bracelet_materials
181/1: import feed_database
181/2: c = feed_database.Chrono24()
181/3: c.manufacturers
181/4: c.manufacturers
181/5: len(max(c.manufacturers, key=len))
181/6: "{:2.f}".format(str(2.33894))
181/7: "{:2.f}".format(2.33894)
181/8: "{:2f}".format(2.33894)
181/9: "{.2f}".format(2.33894)
181/10: "{:.2f}".format(2.33894)
183/1: import populate_models
183/2: from inventory.models import *
183/3: ll
183/4: import models
183/5: import populate_models
183/6: import shelve
183/7: c = populate_models.Chrono24()
183/8: manufacturer = c.manufacturers
183/9: bracelet_material = c.bracelet_materials
183/10: case_material = c.case_materials
183/11: watch_category = c.watch_categories
183/12: shelve.open('dataset')
183/13: f = shelve.open('dataset')
183/14: f.save(manufacturer)
183/15: f = shelve.open('dataset')
183/16: f['manufacturer'] = manufacturer
183/17: f['bracelet_material'] = bracelet_material
183/18: f['case_material'] = case_material
183/19: f['watch_category'] = watch_category
183/20: f.close()
183/21: f = shelve.open('dataset')
183/22: f['manufacturer']
183/23: f.close()
183/24: f['manufacturer']
184/1: o = 'samir'
184/2: f'{0}'
184/3: import sys
184/4: sys.modules
184/5: sys.modules['__name__']
184/6: sys.modules[__name__]
185/1: import pickle
185/2: f = 'dataset'
185/3:
with open(f) as fd:
    d = pickle.load(fd)
185/4:
with open(f) as fd:
    d = pickle.loads(fd)
185/5:
with open(f, 'rb') as fd:
    d = pickle.load(fd)
185/6: import shelve
185/7: f = shelve.open('dataset')
185/8: f
185/9:
for k, v in f:
    print(k, v)
185/10:
for k in f:
    print(k)
186/1: import logging
186/2: logger = logging.getLogger('a')
186/3: logger
186/4: logger.__dict__
186/5: logger_a = logging.getLogger('a.b')
186/6: logger_a.__dict__
186/7: logger_a.parent
186/8: logger_a == logger
186/9: logger_a.parent == logger
186/10: logger_b = logging.getLogger('a')
186/11: logger_b == logger
186/12: ch = logging.StreamHandler()
186/13: ch.setFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
186/14: logger.addHandler(ch)
186/15: logger.__dict__
186/16: logger.__dict__
186/17: logger_a.__dict__
186/18: logger_a.warning('hello')
186/19: logger.warning('hello')
186/20: ch.setFormatter(logging.Formater('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
186/21: ch.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
186/22: logger.warning('hello')
186/23: logger_a.warning('hello')
186/24: logger_b.warning('hello')
186/25: globals
186/26: globals()
186/27: globals().get('logger')
186/28: import random
186/29: random.Random()
186/30: random.Random
186/31: random.SystemRandom
186/32: random.SystemRandom()
186/33: a = random.SystemRandom()
186/34: a.getstate()
186/35: a.getstate
186/36: a.gauss
186/37: a.gauss()
186/38: a = random.randint()
186/39: a = random.randint
186/40: a
186/41: a(1, 3)
186/42: a(1, 100)
186/43: import log_mod1
186/44: m = log_mod1.Mod()
186/45: m()
186/46: m()
186/47: m()
186/48: m()
186/49: m()
186/50: m()
186/51: import sys
186/52: sys.platform.capitalize
186/53: import Thread
186/54: import Threads
186/55: import threading
186/56: from threading import Thread
186/57: from threadings import Thread
186/58: import threading
186/59: from threading import Thread
186/60: random.random
186/61: random.random()
186/62: random.random()
186/63: random.random()
186/64: random.random(1, 4)
186/65: import webbrowser
186/66: webbrowser.open("http://www.google.com")
187/1: 773.5 * 1.25
187/2: 78.0/8
191/1: import psycopg2
192/1: n = "134330980
192/2: n = "134330980"
192/3: print(f"(num:,d}"))
192/4: print(f"(num:,d}")
192/5: print(f"{num:,d}")
192/6: print(f"{n:,d}")
192/7: num = int("134330980")
192/8: print(f"{num:,d}")
192/9: import subprocess
192/10: subprocess.check_call('du -s'.split())
192/11: subprocess.check_call('du -s /home/netsamir'.split())
192/12: res = subprocess.check_call('du -s /home/netsamir'.split())
192/13: res
193/1: import subprocess
193/2: subprocess.check_output('ls')
193/3: b = subprocess.check_output('ls')
193/4: b
193/5: from os import environ
193/6: environ.get('HOME')
193/7: subprocess.check_output(f'du -sh {environ.get('HOME'))
193/8: cmd = f"du -sh {environ.get('HOME')}"
193/9: cmd
194/1: import disk_usage
194/2: import disk_usage
194/3: ls
194/4: ls
194/5: import disk_usage
197/1: import sys
197/2: sys.path
199/1: size_home = b'119G\t/home/netsamir\n'
199/2: size_fs = b'Filesystem                     Size  Used Avail Use% Mounted on\n/dev/mapper/vg_gentoo-lv_root  811G  280G  490G  37% /\n'
199/3: import re
199/4: re.search(r'\d+G.*', size_home)
199/5: re.match(r'\d+G.*', size_home)
199/6: re.search(r'\d+G.*', str(size_home))
199/7: re.match(r'\d+G.*', str(size_home))
199/8: re.search(r'\d+G.*', re.DOTALL)
199/9: z = re.compile(r'\d+G.*', re.DOTALL)
199/10: z.match(size_home)
199/11: z.match(str(size_home))
199/12: size_home
199/13: size_home.split('\t')
199/14: str(size_home).split('\t')
199/15: str(size_home).split('\t', 1)
199/16: str(size_home).split('\\t', 1)
199/17: str(size_home).split('\\t', None)
199/18: str(size_home).split('\\t', 1)
199/19: str(size_home).split('\\t', 1)[0]
199/20: size_fs
199/21: str(size_fs).split()
199/22: size = "b'/dev/mapper/vg_gentoo-lv_root  811G  280G  490G  37% /\n'"
199/23: str(size).split(None, 2)
199/24: str(size).split(None, 3)
199/25: str(size).rsplit(None, 1)
199/26: str(size).rsplit(None, 3)
199/27: str(size).rsplit(None, 3)[1]
199/28: str(size).rsplitline(None, 3)[1]
199/29: str(size).splitline(None, 3)[1]
199/30: t = "akj"
199/31: t.splitlines()
199/32: str(size).splitlines(None, 3)[1]
199/33: str(size).splitlines()
199/34: str(size).splitlines(None, 3)[1]
199/35: str(size).splitlines()
199/36: str(size).splitlines(None)
199/37: str(size).rsplitline(None, 3)[1]
199/38: str(size).rsplit(None, 3)[1]
199/39: import subprocess
199/40: size_fs = subprocess.check_output(f"df -h / | tail -1", shell=True)
199/41: size_fs
199/42: str(size_fs).rsplit(None, 2)
199/43: str(size_fs).rsplit(None, 2)[1]
199/44: b = b'kjl'
199/45: print(b)
199/46: print(str(b))
199/47: print(b)
199/48: print(b)
199/49: print(str(b))
199/50: print(repr(b))
199/51: print(b, 'utf8')
199/52: print(b,ascii)
199/53: print(b, 'ascii')
200/1: ls
201/1: import sys
201/2: sys.path
201/3: sys.path.append('.')
201/4: import disk_usage
203/1: import dii
208/1: from glob import glob
208/2: files = glob('2019*')
208/3: files
208/4:
for f in files:
    print(f.rsplit())
208/5:
for f in files:
    print(f.rsplit(None, 2))
208/6:
for f in files:
    print(f.rsplit(None, 2)[1])
208/7:
for f in files:
    print(f.rsplit(None, 2)[1])
208/8: sum(f.rsplit(None, 2)[1] for f in files)
208/9: sum(int(f.rsplit(None, 2)[1]) for f in files)
208/10: sum(float(f.rsplit(None, 2)[1]) for f in files)
208/11: print(f"Total {sum(float(f.rsplit(None, 2)[1]) for f in files)}")
208/12: print(f"Total {sum(float(f.rsplit(None, 2)[1]) for f in files):,}")
208/13: print(f"Total: {sum(float(f.rsplit(None, 2)[1]) for f in files):,}")
208/14: files = glob('2019*')
210/1: import gettext
210/2: t = gettext.translation('gettext_example', 'locale', fallback=True)
210/3: t
210/4: t.gettext()
210/5: from babel import Locale
210/6: Locale.territories['BE']
210/7: locale = Locale('fr', 'BE')
210/8: locale.territories['BE']
210/9: locale = Locale('nl', 'BE')
210/10: locale.territories['BE']
210/11: locale = Locale('nl', 'BE')
210/12: month_names = locale.months['format']['wide'].items()
210/13:
for idx, name in sorted(month_names):
    print(name)
211/1: f = 'settings.py'
212/1: import environ
212/2: import pathlib
212/3: pathlib.Path('.')
213/1: import parser
213/2: import argparse
213/3: help(argparse)
213/4: from pathlib import Path
213/5: ll
213/6: Path('swap.py').absolute
213/7: Path('swap.py').absolute()
213/8: Path('swap.py').absolute().parent
   1: import requests
   2: IBAN = 'DE04500700100532013000'
   3: URL_IBAN_VALIDITY = f'https://sandbox.swift.com/swiftref-api/ibans/{iban}/validity'
   4: URL_IBAN_VALIDITY = f'https://sandbox.swift.com/swiftref-api/ibans/{IBAN}/validity'
   5: requests.get(URL_IBAN_VALIDITY)
   6: response = requests.get(URL_IBAN_VALIDITY)
   7: response.raw
   8: response.json
   9: response.json()
  10: response = requests.get(URL_IBAN_VALIDITY, auth=('vm47jyQ6vxfWzUAV7GdGfwYMYGgJLyBs', 'AE28JiJ0HAlStppu'))
  11: response
  12: response.content
  13: response = requests.get(URL_IBAN_VALIDITY)
  14: response.content
  15: response = requests.get(URL_IBAN_VALIDITY, auth=('samir.sadek@euroclear.com', 'R3ach0ut4U@Swift'))
  16: response
  17: response.content
  18: URL_IBAN_VALIDITY = f'https://sandbox.swift.com/swiftref-api/ibans/{IBAN}/validity'
  19: response = requests.get(URL_IBAN_VALIDITY, auth=('', ''))
  20: response
  21: response.content
  22: headers={'x-api-key': 'vm47jyQ6vxfWzUAV7GdGfwYMYGgJLyBs-AE28JiJ0HAlStppu'}
  23: headers={'x-api-key': 'vm47jyQ6vxfWzUAV7GdGfwYMYGgJLyBs'}
  24: response = requests.get(URL_IBAN_VALIDITY, headers=headers)
  25: response
  26: response.content
  27: IBAN = 'DE04500700100532013000'
  28: URL_IBAN_VALIDITY = f'https://sandbox.swift.com/swiftref-api/ibans/{IBAN}/validity'
  29: headers={'x-api-key': 'vm47jyQ6vxfWzUAV7GdGfwYMYGgJLyBs'}
  30: response = requests.get(URL_IBAN_VALIDITY, headers=headers)
  31: response.content
  32: kjkkjzqwer
  33: URL_TOKEN = 'https://sandbox.swift.com/oauth2/v1/token'
  34: header_token = {'Authorization': f'Basic {BASE64_INFO}'}
  35: import base64
  36: consumer = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
  37: secret = 'slr1yOEfgvYLzgAI'
  38: header_token = {'Authorization': f'Basic {CREDENTIALS}'}
  39: header_token = {'Authorization': f'Basic {BASE64_CREDENTIALS}'}
  40: CREDENTIALS = f'{consumer}:{secret}'
  41: base64.b64encode(CREDENTIALS)
  42: base64.b64encode(CREDENTIALS.encode('utf8'))
  43: base64.b64encode("yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B:pyvHEmGrNqRHBHRp".encode('utf8'))
  44: base64.b64encode(CREDENTIALS.encode('utf8'))
  45: BASE64_CREDENTIALS = str(base64.b64encode(CREDENTIALS.encode('utf8')))
  46: header_token = {'Authorization': f'Basic {BASE64_CREDENTIALS}'}
  47: header_token
  48: response = requests.get(URL_TOKEN, headers=header_token)
  49: response
  50: response.content
  51: BASE64_CREDENTIALS = str(base64.b64encode(CREDENTIALS.encode('utf8')))
  52: BASE64_CREDENTIALS
  53: BASE64_CREDENTIALS = base64.b64encode(CREDENTIALS.encode('utf8'))
  54: BASE64_CREDENTIALS
  55: BASE64_CREDENTIALS.decode('utf8')
  56: BASE64_CREDENTIALS = base64.b64encode(CREDENTIALS.encode('utf8')).decode('utf8')
  57: response = requests.get(URL_TOKEN, headers=header_token)
  58: response.content
  59: header_token = {'Authorization': f'Basic {BASE64_CREDENTIALS}'}
  60: response = requests.get(URL_TOKEN, headers=header_token)
  61: response.content
  62: header_token
  63: header_token = {'Authorization': f'Basic {BASE64_CREDENTIALS}'}
  64: header_token
  65: headers
  66: headers.update(header_token)
  67: headers
  68: headers['x-api-key'] = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
  69: response = requests.get(URL_TOKEN, headers=headers)
  70: response
  71: response.content
  72: headers
  73: headers['x-api-key'] = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m54'
  74: response = requests.get(URL_TOKEN, headers=headers)
  75: response.content
  76: headers['x-api-key'] = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
  77: headers
  78: consumer = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
  79: secret = 'slr1yOEfgvYLzgAI'
  80: CREDENTIALS = f'{consumer}:{secret}'
  81: BASE64_CREDENTIALS = base64.b64encode(CREDENTIALS.encode('utf8')).decode('utf8')
  82: Authorization = {'Authorization': f'Basic {BASE64_CREDENTIALS}'}
  83: POST_TOKEN_URL = 'https://sandbox.swift.com/oauth2/v1/token'
  84: headers = {}
  85: headers['x-api-key'] = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
  86: heasers.update(Authorization)
  87: headers.update(Authorization)
  88: headers
  89: response = requests.post(POST_TOKEN_URL, headers=headers)
  90: response
  91: response.content
  92: POST_TOKEN_URL = 'https://sandbox.swift.com/oauth2/v1/token'
  93: response = requests.post(POST_TOKEN_URL)
  94: response
  95: response.content
  96: response = requests.post(POST_TOKEN_URL, data=headers)
  97: response.content
  98: response = requests.post(POST_TOKEN_URL, data=headers)
  99: response.content
 100: response = requests.post(POST_TOKEN_URL, headers=headers)
 101: response.content
 102: content_type = {'Content-Type': 'application/x-www-form-urlencoded'}
 103: headers.update(content_type)
 104: headers
 105: response = requests.post(POST_TOKEN_URL, headers=headers)
 106: response
 107: response.content
 108: headers['grant_type'] = 'password'
 109: response = requests.post(POST_TOKEN_URL, headers=headers)
 110: response.content
 111: headers
 112: headers
 113: response = requests.get(POST_TOKEN_URL, headers=headers)
 114: response
 115: response.content
 116: response = requests.post(POST_TOKEN_URL, headers=headers)
 117: response.content
 118: headers
 119: response = requests.post(POST_TOKEN_URL, headers=headers, data=headers)
 120: response.content
 121: headers_1 = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'}
 122:
headers = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E',
 'Authorization': 'Basic OGJIT09xVHRuQUFZcm9TTlRKZ2V4WTZLT1lTeDNtNUU6c2xyMXlPRWZndllMemdBSQ==',
 'Content-Type': 'application/x-www-form-urlencoded'}
 123: body = {'grant_type': 'password'}
 124: response = requests.post(POST_TOKEN_URL, headers=headers, data=body)
 125: response.content
 126: response = requests.post(POST_TOKEN_URL, headers=headers)
 127: response.content
 128:
headers = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E',
 'Authorization': 'Basic OGJIT09xVHRuQUFZcm9TTlRKZ2V4WTZLT1lTeDNtNUU6c2xyMXlPRWZndllMemdBSQ==',
 'Content-Type': 'application/x-www-form-urlencoded'}
 129: headers['grant_type'] = 'password'
 130: data = {'grant_type': 'password'}
 131: data.update({'username': 'samir.sadek@euroclear.com', 'password': 'R3ach0ut4U@Swift'})
 132: data
 133:
headers = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E',
 'Authorization': 'Basic OGJIT09xVHRuQUFZcm9TTlRKZ2V4WTZLT1lTeDNtNUU6c2xyMXlPRWZndllMemdBSQ==',
 'Content-Type': 'application/x-www-form-urlencoded'}
 134: response = requests.post(POST_TOKEN_URL, headers=headers, data=data)
 135: response.content
 136: data.update({'username': 'samir.sadek@euroclear.com', 'password': 'R3ach0ut4U@Swift'})
 137: response = requests.post(POST_TOKEN_URL, headers=headers, data=data)
 138: response.content
 139: data
 140: headers
 141: data
 142: response = requests.post(POST_TOKEN_URL, headers=headers, data=data)
 143: response
 144: response.content
 145: data['client_id'] = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
 146: data['client_secret'] = secret
 147: del data
 148: data = {}
 149: data['client_id'] = '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'
 150: data['client_secret'] = secret
 151: data
 152: data['grant_type'] = 'password'
 153: data.update({'username': 'samir.sadek@euroclear.com', 'password': 'R3ach0ut4U@Swift'})
 154: data
 155: requests.post(URL_TOKEN, data=data)
 156: response = requests.post(POST_TOKEN_URL,  data=data)
 157: response.content
 158: POST_TOKEN_URL = 'https://sandbox.swift.com/oauth2/v1/token'
 159: Authorization = {'Authorization': f'Basic {BASE64_CREDENTIALS}'}
 160: Authorization
 161: data = {'grant_type': 'password'}
 162: data.update({'username': 'sandbox-id', 'password': 'sandbox-key'})
 163: data
 164: headers
 165: response = requests.post(POST_TOKEN_URL,  headers=headers, data=data)
 166: response
 167: response.content
 168: response = requests.post(POST_TOKEN_URL,  headers=headers, data=data)
 169: response.content
 170: URL_GET_VALCUR = 'https://sandbox.swift.com/biapi/banking-analytics/1.0.0/value-and-currency?market=PMTS_payments&reporting_period=2019-01"
 171: URL_GET_VALCUR = 'https://sandbox.swift.com/biapi/banking-analytics/1.0.0/value-and-currency?market=PMTS_payments&reporting_period=2019-01'
 172: headers
 173:
headers_bearer = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E', 
'Authorization': 'bearer AKu5QZQvxBvWovn63wqfcgHsGwwX',
}
 174:
headers_bearer = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E', 
'Authorization': 'bearer {access_token}'}
 175: access_token = 'wWHsjRsqYsDkKufQIcQZOK5GGdTi'
 176:
headers_bearer = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E', 
'Authorization': f'bearer {access_token}'}
 177: response = requests.post(URL_GET_VALCUR,  headers=headers)
 178: response
 179: response.content
 180: response = requests.post(POST_TOKEN_URL,  headers=headers, data=data)
 181: response.content
 182: access_token = 'UnQ7KHmXvVJV6uAD2wEYJxuSpcaG'
 183:
headers_bearer = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E', 
'Authorization': f'bearer {access_token}'}
 184: response = requests.post(URL_GET_VALCUR,  headers=headers)
 185: response
 186: response.content
 187: headers_bearer
 188: response = requests.post(URL_GET_VALCUR,  headers={'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E'}, data={'Authorization': 'bearer UnQ7KHmXvVJV6uAD2wEYJxuSpcaG'})
 189: response
 190: response.content
 191: response = requests.post(POST_TOKEN_URL,  headers=headers, data=data)
 192: response.content
 193: access_token = 'gVeOYxNgrlciNoJe9KAT5DERqCGG'
 194:
headers_bearer = {'x-api-key': '8bHOOqTtnAAYroSNTJgexY6KOYSx3m5E', 
'Authorization': f'bearer {access_token}'}
 195: response = requests.get(URL_GET_VALCUR,  headers=headers_bearer)
 196: response
 197: response.content
 198: URL_GET_VALCUR
 199: response = requests.get(URL_GET_VALCUR,  headers={'Authorization': 'Bearer gVeOYxNgrlciNoJe9KAT5DERqCGG'})
 200: response
 201: response.content
 202: from pprint import pprint
 203: pprint(response.content)
 204: import json
 205: content.text
 206: response.text
 207: parsed = json.load(response.text)
 208: parsed = json.load(response.content)
 209: json.dump(response.text)
 210: parsed = json.loads(response.content)
 211: parsed
 212: json.dump(parsed)
 213: json.dumps(parsed)
 214: json.dumps(parsed, indent=4, sort_keys=True)
 215: print(json.dumps(parsed, indent=4, sort_keys=True))
 216: ll
 217: response = requests.post(POST_TOKEN_URL,  headers=headers, data=data)
 218: response.text
 219: response = requests.get(URL_GET_VALCUR,  headers={'Authorization': 'Bearer GHH0PEtxf94buQu6GnJ6r4mu1ZMo'})
 220: response
 221: parsed = json.loads(response.content)
 222: print(json.dumps(parsed, indent=4, sort_keys=True))
 223: %history -g -f swift.api
